<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Wednesday, September 22, 2021, 7:57 PM -->
<!-- MuClient version 5.07-pre -->

<!-- Plugin "Tallimos_LevelGuide" generated by Plugin Wizard -->

<muclient>
<plugin
   name="Tallimos_LevelGuide"
   author="Tallimos"
   id="05cf2207e6cf999394286fce"
   language="Lua"
   purpose="Standalone Script for my where to level aliases and Gofer Level Guide"
   save_state="y"
   date_written="2021-09-22 19:56:09"
   requires="4.73"
   version="2.0"
   >

</plugin>


<!--  Get our standard constants -->

<include name="constants.lua"/>

<!--  Triggers  -->

<triggers>
  <trigger
   group="CheckLevelTriggers"
   match="^\s*\[ Top 100 most popular kills for levels (\d+) to (\d+) \]$"
   name="CLTopLine"
   omit_from_output="y"
   regexp="y"
   sequence="100"
  >
  </trigger>
  <trigger
   group="CheckLevelTriggers"
   match="^No\.\s*Mob name\s*Level\s*Area Name\s*Killed$"
   name="CLHeader"
   omit_from_output="y"
   regexp="y"
   sequence="100"
  >
  </trigger>
  <trigger
   group="CheckLevelTriggers"
   match="^\-\-\-\s*\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\s\-\-\-\-\-\s*\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\s\-\-\-\-\-\-$"
   name="CLLine"
   omit_from_output="y"
   regexp="y"
   sequence="100"
  >
  </trigger>
  <trigger
   script="GrabMobs"
   group="CheckLevelTriggers"
   match="^\s*(\d+)\s\-\s(.*?)\s*(\d+)\s*(.*?)\s*(\d+)$"
   name="CLMobLine1_99"
   omit_from_output="y"
   regexp="y"
   sequence="100"
  >
  </trigger>
  <trigger
   group="CheckLevelTriggers"
   match="^(\d+)\s\-\s(.*?)\s*(\d+)\s*(.*?)\s*(\d+)$"
   name="CLMobLine100"
   omit_from_output="y"
   regexp="y"
   sequence="100"
  >
  </trigger>
  <trigger
   group="CheckLevelTriggers"
   match="^\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\[ THE END \]\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-$"
   name="CLEndLine"
   omit_from_output="y"
   regexp="y"
   sequence="100"
  >
  </trigger>
  <trigger
   script="DisplayMobs"
   group="CheckLevelTriggers"
   match="^See also\: Mobkills, Areakills and Areadeaths commands\.$"
   name="CLDisplay"
   omit_from_output="y"
   regexp="y"
   sequence="100"
  >
  </trigger>

</triggers>

<!--  Aliases  -->

<aliases>
	<alias
	   script="CheckLevelMenu"
	   match="^(?:checklevel|clevel) (.*?)$"
	   enabled="y"
	   expand_variables="y"
	   regexp="y"
	   sequence="105"
	  >
	</alias>
	<alias
	   script="checklevel"
	   match="^(checklevel|clevel)$"
	   enabled="y"
	   expand_variables="y"
	   regexp="y"
	   sequence="100"
	  >
	</alias>
	<alias
	   script="checklevelevil"
	   match="^(checklevelevil|clevelevil|clevele)$"
	   enabled="y"
	   expand_variables="y"
	   regexp="y"
	   sequence="100"
	  >
	</alias>
	<alias
	   script="checklevelgood"
	   match="^(checklevelgood|clevelgood|clevelg)$"
	   enabled="y"
	   expand_variables="y"
	   regexp="y"
	   sequence="100"
	  >
	</alias>
	<alias
	   script="checklevelneutral"
	   match="^(checklevelneutral|clevelneutral|cleveln)$"
	   enabled="y"
	   expand_variables="y"
	   regexp="y"
	   sequence="100"
	  >
	</alias>
	<alias
	   script="CompleteGuideMenu"
	   match="^(?:checklevel2|clevel2|cguide) (.*?)$"
	   enabled="y"
	   expand_variables="y"
	   regexp="y"
	   sequence="105"
	  >
	</alias>
	<alias
	   script="CompleteGuide"
	   match="^(checklevel2|clevel2|cguide)$"
	   enabled="y"
	   expand_variables="y"
	   regexp="y"
	   sequence="100"
	  >
	</alias>
	<alias
	   script="CompleteGuideCurrentLevel"
	   match="^(checklevel3|clevel3|lguide)$"
	   enabled="y"
	   expand_variables="y"
	   regexp="y"
	   sequence="100"
	  >
	</alias>
</aliases>

<!--  Script  -->

<script>
<![CDATA[
require "aard_register_z_on_create"

require "mw_theme_base"
require "serialize"
require "commas"
require "gmcphelper"
require "copytable"
require "tprint"

local msg_colour      = "lightslategrey"
local err_colour      = "firebrick"
local help_colour     = "lightslategrey"
local qty_colour      = "cyan"
local optional_colour = "lightcoral"
local command_colour  = "white"
local cmd_required    = "royalblue"
local help_command_colour  = "red"

local noteline = "=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-="

function CheckLevelMenu(name, line, wc)
	commandline = trim(string.lower(wc[1]))
	wordtable = utils.split (commandline, " ")

	cmd = wordtable[1]
	
	if cmd == "min" or cmd == "minimum" then
		attrib = wordtable[2]
		
		if attrib ~= nil then
			if tonumber(attrib) ~= nil then
				mbminlevel = tonumber(attrib)
				
				ColourNote(msg_colour, "", "Mobdeath minimum level set to ", qty_colour, "", mbminlevel)
			else
				ColourNote(msg_colour, "", "Minimum level must be a number")
			end
		else
			ColourNote(msg_colour, "", "Minimum level must be a number")
		end
	elseif cmd == "max" or cmd == "maximum" then
		attrib = wordtable[2]
		
		if attrib ~= nil then
			if tonumber(attrib) ~= nil then
				mbmaxlevel = tonumber(attrib)
				
				ColourNote(msg_colour, "", "Mobdeath maximum level set to ", qty_colour, "", mbmaxlevel)
			else
				ColourNote(msg_colour, "", "Maximum level must be a number")
			end
		else
			ColourNote(msg_colour, "", "Maximum level must be a number")
		end
	elseif cmd == "display" then
		dtype = wordtable[2]
		if dtype ~= nil then
			if dtype == "mobs" then
				mbdisplay = "mobs"
				
				ColourNote(msg_colour, "", "Mobdeath output set to ", qty_colour, "", "mobs.")
			elseif dtype == "area" then
				mbdisplay = "area"
				
				ColourNote(msg_colour, "", "Mobdeath output set to ", qty_colour, "", "area.")
			end
		else
			if mbdisplay == "area" then
				mbdisplay = "mobs"
				
				ColourNote(msg_colour, "", "Mobdeath output set to ", qty_colour, "", "mobs.")
			elseif mbdisplay == "mobs" then
				mbdisplay = "area"
				
				ColourNote(msg_colour, "", "Mobdeath output set to ", qty_colour, "", "area.")
			end
		end
	elseif cmd == "help" then
		clevel_help()
	else		
		ColourNote(msg_colour, "", "Invalid command. Please see ", qty_colour, "", "clevel help", msg_colour, "", " for more information.")
		Note("")
	end
	
	SaveState()
end -- CheckLevelMenu

function CompleteGuideMenu(name, line, wc)
	commandline = trim(string.lower(wc[1]))
	wordtable = utils.split (commandline, " ")

	cmd = wordtable[1]
	
	if cmd == "add" then
		if wordtable[2] == nil or wordtable[3] == nil then
			ColourNote(msg_colour, "", "Command Usage: ", help_command_colour, "", "cguide add <level range> <area keyword> <optional instructions>", msg_colour, "", ".")
		else
			range = wordtable[2]
			area = string.lower(wordtable[3])
			optional = "none" 
			
			rindex = IndexLookup(range)

			if rindex == 0 then
				ColourNote(msg_colour, "", "Invalid level range, please try again.")
				
				return
			end
			
			if RangeFree(rindex) == "no" then
				ColourNote(msg_colour, "", "That level range already has 4 areas listed. Please remove an area from this range if you wish to add a new one.")
				
				return
			end
			
			if CheckArea(area) == "no" then
				ColourNote(msg_colour, "", "Invalid Area Keyword, please try again.")
				
				return
			end
			
			alreadyadded = "no"
			
			for i, v in ipairs(CGuideTable[rindex]) do
				aname = v
				
				isextra, aname2, extra = CheckExtra(aname)

				if isextra == "yes" then
					if aname2 == area then
						alreadyadded = "yes"
					end
				else
					if aname == area then
						alreadyadded = "yes"
					end
				end
			end
			
			if alreadyadded == "yes" then
				if cgdisplay == "full" then
					disname = GetAreaFull(area)
				elseif cgdisplay == "keyword" then
					disname = area
				end
				
				ColourNote(qty_colour, "", disname, msg_colour, "", " has already been added to the ", qty_colour, "", range, msg_colour, "", " level range.")
				
				return
			end
			
			wordcount = 0

			for i,v in ipairs(wordtable) do
				wordcount = wordcount + 1
			end
			
			for x = 4, wordcount, 1 do
				if optional == "none" then
					optional = wordtable[x]
				else
					optional = optional .. " " .. wordtable[x]
				end
			end
			
			leng = tonumber(string.len(optional))
			
			if leng > 12 then
				ColourNote(msg_colour, "", "Additional information has been limited to 12 characters for display purposes.")
				
				return
			end
			
			CGuideAddArea(range, rindex, area, optional)
		end
	elseif cmd == "remove" or cmd == "delete" then
		if wordtable[2] == nil or wordtable[3] == nil then
			ColourNote(msg_colour, "", "Command Usage: ", help_command_colour, "", "cguide remove <level range> <area keyword>", msg_colour, "", ".")
		else
			range = wordtable[2]
			area = string.lower(wordtable[3])
			
			rindex = IndexLookup(range)

			if rindex == 0 then
				ColourNote(msg_colour, "", "Invalid level range, please try again.")
				
				return
			end
			
			if CheckArea(area) == "no" then
				ColourNote(msg_colour, "", "Invalid Area Keyword, please try again.")
				
				return
			end

			CGuideRemoveArea(range, rindex, area)
		end
	elseif cmd == "display" then
		dtype = wordtable[2]
		if dtype ~= nil then
			if dtype == "full" then
				cgdisplay = "keyword"
				
				ColourNote(msg_colour, "", "Level Guide area output set to ", qty_colour, "", "keywords.")
			elseif dtype == "keyword" then
				cgdisplay = "area"
				
				ColourNote(msg_colour, "", "Level Guide area output set to ", qty_colour, "", "full name.")
			end
		else
			if cgdisplay == "full" then
				cgdisplay = "keyword"
				
				ColourNote(msg_colour, "", "Level Guide area output set to ", qty_colour, "", "keywords.")
			elseif cgdisplay == "keyword" then
				cgdisplay = "full"
				
				ColourNote(msg_colour, "", "Level Guide area output set to ", qty_colour, "", "full name.")
			end
		end
	elseif cmd == "keyword" then
		sletter = string.lower(wordtable[2])
		
		if tonumber(sletter) ~= nil then
			ColourNote(msg_colour, "", "Please enter 1 letter only.")
			
			return
		end
		
		leng = tonumber(string.len(sletter))
		
		if leng > 1 then
			ColourNote(msg_colour, "", "Please enter 1 letter only.")
			
			return
		end
		
		DisplayKeyword(sletter)
	elseif cmd == "help" then
		clevel_help()
	else		
		ColourNote(msg_colour, "", "Invalid command. Please see ", qty_colour, "", "clevel help", msg_colour, "", " for more information.")
		Note("")
	end
	
	SaveState()
end -- CompleteGuideMenu

function DisplayKeyword(sletter)
	ColourNote(msg_colour, "", "Displaying keywords that begin with letter - ", qty_colour, "", sletter)
	Note()
	leng = 0
	
	for i,v in pairs(AreaNames) do
		a = string.sub(i, 1, 1)
		if a == sletter then
			sleng = tonumber(string.len(i))

			if sleng > leng then
				leng = sleng
			end
		end			
	end
	
	for i,v in pairs(AreaNames) do
		a = string.sub(i, 1, 1)
		if a == sletter then
			spacing = MakeSpace(i, leng)
			
			ColourNote(msg_colour, "", "Keyword: ", qty_colour, "", i .. spacing, msg_colour, "", " Full Name: ", qty_colour, "", v)
		end			
	end
end

function RangeFree(rindex)
	isroom = "yes"
	
	if CGuideTable[rindex][4] ~= nil then
		isroom = "no"
	end
	
	return isroom
end

function CheckArea(area)
	isarea = "no"
	
	for i,v in pairs(AreaNames) do
		if i == area then
			isarea = "yes"
		end
	end
	
	return isarea
end

function GetAreaFull(area)
	afname = ""
	
	for i,v in pairs(AreaNames) do
		if i == area then
			afname = v
		end
	end
	
	return afname
end

function CGuideAddArea(range, rindex, area, optional)
	if optional == "none" then
		toadd = area
		disname = area
	else
		if cgdisplay == "full" then
			disname = GetAreaFull(area)
			disname = disname .. " (" .. optional .. ")"
		elseif cgdisplay == "keyword" then
			disname = area .. " (" .. optional .. ")"
		end
		
		toadd = area .. "(" .. optional .. ")"
	end
	
	rrindex = WhichIndex(rindex)
	
	CGuideTable[rindex][rrindex] = toadd
	
	ColourNote(qty_colour, "", disname, msg_colour, "", " has been added to the ", qty_colour, "", range, msg_colour, "", " level range.")
	
	SaveState()
end

function CGuideRemoveArea(range, rindex, area)
	rrindex = WhichIndex2(rindex, area)

	CGuideTable[rindex][rrindex] = nil
	
	for x = 1, 4, 1 do
		if CGuideTable[rindex][x] == nil then
			a = x + 1

			if CGuideTable[rindex][a] ~= nil then
				CGuideTable[rindex][x] = CGuideTable[rindex][a]
				CGuideTable[rindex][a] = nil
			end
		end
	end
	
	if cgdisplay == "full" then
		disname = GetAreaFull(area)
	elseif cgdisplay == "keyword" then
		disname = area
	end
	
	ColourNote(qty_colour, "", disname, msg_colour, "", " has been removed from the ", qty_colour, "", range, msg_colour, "", " level range.")
	
	SaveState()
end

function WhichIndex(rindex)
	rrindex = 0
	
	if CGuideTable[rindex][1] == nil then
		rrindex = 1
	elseif CGuideTable[rindex][2] == nil then
		rrindex = 2
	elseif CGuideTable[rindex][3] == nil then
		rrindex = 3
	elseif CGuideTable[rindex][4] == nil then
		rrindex = 4
	end
	
	return rrindex
end

function WhichIndex2(rindex, area)
	rrindex = 0
	
	for i, v in ipairs(CGuideTable[rindex]) do
		aname = v
		
		isextra, aname2, extra = CheckExtra(aname)
		 
		if isextra == "yes" then
			if aname2 == area then
				rrindex = i
			end
		else
			if aname == area then
				rrindex = i 
			end
		end
	end
	
	return rrindex
end

function checklevel()
	Send_GMCP_Packet("request char")
	
	GetLevel()
	
	if gmcpcharalign == nil then 
		ColourNote(msg_colour, "", "GMCP Data has not been populated yet, please try again.")
		
		return
	elseif gmcpcharalign > 876 then
		checklevelevil()
	elseif gmcpcharalign < -875 then
		checklevelgood()
	else
		ColourNote(msg_colour, "", "You are currently neutral aligned. Please use ", command_colour, "", "checklevelevil", msg_colour, "", " or ", command_colour, "", "checklevelgood", msg_colour, "", " for the top 5 most killed evil and good aligned mobs 15-25 levels above your current level.")
	end
end -- checklevel

function checklevelevil()
	local minnum = tonumber(gmcpcharlevel) + mbminlevel
	local maxnum = tonumber(gmcpcharlevel) + mbmaxlevel
	
	CreateMobTable()

	mobalign = "Evil"
	
	world.EnableGroup ("CheckLevelTriggers", 1)	
	
	SendNoEcho ("mobdeaths " .. minnum .. " " .. maxnum .. " evil")
end -- checklevelevil

function checklevelgood()
	local minnum = tonumber(gmcpcharlevel) + mbminlevel
	local maxnum = tonumber(gmcpcharlevel) + mbmaxlevel
	
	CreateMobTable()
	
	mobalign = "Good"
	
	world.EnableGroup ("CheckLevelTriggers", 1)	
	
	SendNoEcho ("mobdeaths " .. minnum .. " " .. maxnum .. " good")
end -- checklevelgood

function checklevelneutral()
	local minnum = tonumber(gmcpcharlevel) + mbminlevel
	local maxnum = tonumber(gmcpcharlevel) + mbmaxlevel
	
	CreateMobTable()
	
	mobalign = "All"
	
	world.EnableGroup ("CheckLevelTriggers", 1)	
	
	SendNoEcho ("mobdeaths " .. minnum .. " " .. maxnum)
end -- checklevelneutral

function CreateMobTable()
	MobTable = {}
	
	MobTable[1] = {}
	
	MobTable[1]["name"] = ""
	MobTable[1]["level"] = 0
	MobTable[1]["area"] = ""
	MobTable[1]["killed"] = 0

	MobTable[2] = {}
	
	MobTable[2]["name"] = ""
	MobTable[2]["level"] = 0
	MobTable[2]["area"] = ""
	MobTable[2]["killed"] = 0

	MobTable[3] = {}
	
	MobTable[3]["name"] = ""
	MobTable[3]["level"] = 0
	MobTable[3]["area"] = ""
	MobTable[3]["killed"] = 0

	MobTable[4] = {}
	
	MobTable[4]["name"] = ""
	MobTable[4]["level"] = 0
	MobTable[4]["area"] = ""
	MobTable[4]["killed"] = 0

	MobTable[5] = {}
	
	MobTable[5]["name"] = ""
	MobTable[5]["level"] = 0
	MobTable[5]["area"] = ""
	MobTable[5]["killed"] = 0
end -- CreateMobTable

-- Function sorts the data recieved from mobdeaths based on users settings

function GrabMobs(name, line, wc)
	mname = wc[2]
	mlevel = wc[3]
	marea = wc[4]
	mkilled = wc[5]

	if mbdisplay == "mobs" then
		distable = "MobTable"
		chkdata = mname
		chktoken = "name"
	elseif mbdisplay == "area" then
		distable = "AreaTable"
		chkdata = marea
		chktoken = "area"
	end
	
	if MobTable[1]["name"] == "" then
		MobTable[1]["name"] = mname
		MobTable[1]["level"] = mlevel
		MobTable[1]["area"] = marea
		MobTable[1]["killed"] = mkilled
	else
		if chkdata ~= MobTable[1][chktoken] then
			if MobTable[2]["name"] == "" then
				MobTable[2]["name"] = mname
				MobTable[2]["level"] = mlevel
				MobTable[2]["area"] = marea
				MobTable[2]["killed"] = mkilled
			else
				if chkdata ~= MobTable[2][chktoken] then
					if MobTable[3]["name"] == "" then
						MobTable[3]["name"] = mname
						MobTable[3]["level"] = mlevel
						MobTable[3]["area"] = marea
						MobTable[3]["killed"] = mkilled
					else
						if chkdata ~= MobTable[3][chktoken] then
							if MobTable[4]["name"] == "" then
								MobTable[4]["name"] = mname
								MobTable[4]["level"] = mlevel
								MobTable[4]["area"] = marea
								MobTable[4]["killed"] = mkilled
							else
								if chkdata ~= MobTable[4][chktoken] then
									if MobTable[5]["name"] == "" then
										MobTable[5]["name"] = mname
										MobTable[5]["level"] = mlevel
										MobTable[5]["area"] = marea
										MobTable[5]["killed"] = mkilled
									end
								end
							end
						end
					end
				end
			end
		end
	end
end -- GrabMobs

function DisplayMobs()
	local minnum = tonumber(gmcpcharlevel) + mbminlevel
	local maxnum = tonumber(gmcpcharlevel) + mbmaxlevel
	
	if mbdisplay == "mobs" then
		distype = "Mobs"
	elseif mbdisplay == "area" then
		distype = "Areas"
	end
	
	ColourNote(msg_colour, "", "                  Top 5 ", qty_colour, "", distype, msg_colour, "", " - ", qty_colour, "", mobalign, msg_colour, "", " aligned in Level Range: ", qty_colour, "", minnum, msg_colour, "", " - ", qty_colour, "", maxnum)

	Note()
	
	ColourNote(msg_colour, "", "No.   Mob name                                Level  Area Name            Killed")

	ColourNote(msg_colour, "", "---   --------------------------------------- -----  -------------------- ------")

	for i = 1, 5, 1 do
		rowindex = i
		
		DisplayMobRow(rowindex)
	end

	world.EnableGroup ("CheckLevelTriggers", 0)
end -- DisplayMobs

function DisplayMobRow(rowindex)
	namespace = MakeSpace(MobTable[rowindex]["name"], 39)
	levelspace = MakeSpace(MobTable[rowindex]["level"], 5)
	areaspace = MakeSpace(MobTable[rowindex]["area"], 20)
	killedspace = MakeSpace(MobTable[rowindex]["killed"], 6)
	
	ColourNote(msg_colour, "", "  " .. rowindex .. "   ", qty_colour, "", MobTable[rowindex]["name"] .. namespace, msg_colour, "", " ", qty_colour, "", levelspace.. MobTable[rowindex]["level"], msg_colour, "", "  ", qty_colour, "", MobTable[rowindex]["area"] .. areaspace, msg_colour, "", " ", qty_colour, "", killedspace .. MobTable[rowindex]["killed"])
end -- DisplayMobRow

function CheckExtra(ExtraVar)
	isextra = "no"
	areaname = ""
	extra = ""
	
	for w in string.gmatch (ExtraVar, "%(.+%)") do
		if w ~= nil then
			isextra = "yes"
			extra = w
			areaname = ExtraVar:gsub(w, "")
			areaname = areaname:gsub(" ", "")
			areaname = areaname:gsub("%(", "")
			areaname = areaname:gsub("%)", "")
		end
	end

	return isextra, areaname, extra
end

function CompleteGuide()
	area1maxlen = 0
	area2maxlen = 0
	area3maxlen = 0
	area4maxlen = 0
	
	for i,v in ipairs(CGuideTable) do
		if CGuideTable[i][1] ~= nil then
			aname = CGuideTable[i][1]

			isextra, aname2, extra = CheckExtra(aname)
			
			if isextra == "yes" then
				aname = AreaNames[aname2] .. " " .. extra
			else
				aname = AreaNames[aname]
			end
			
			leng = tonumber(string.len(aname))
			
			if leng > area1maxlen then area1maxlen = leng end
		end
		
		if CGuideTable[i][2] ~= nil then
			aname = CGuideTable[i][2]

			isextra, aname2, extra = CheckExtra(aname)
			
			if isextra == "yes" then
				aname = AreaNames[aname2] .. " " .. extra
			else
				aname = AreaNames[aname]
			end
			
			leng = tonumber(string.len(aname))
		
			if leng > area2maxlen then area2maxlen = leng end
		end
		
		if CGuideTable[i][3] ~= nil then
			aname = CGuideTable[i][3]

			isextra, aname2, extra = CheckExtra(aname)
			
			if isextra == "yes" then
				aname = AreaNames[aname2] .. " " .. extra
			else
				aname = AreaNames[aname]
			end
			
			leng = tonumber(string.len(aname))
			
			if leng > area3maxlen then area3maxlen = leng end
		end
		
		if CGuideTable[i][4] ~= nil then
			aname = CGuideTable[i][4]

			isextra, aname2, extra = CheckExtra(aname)
			
			if isextra == "yes" then
				aname = AreaNames[aname2] .. " " .. extra
			else
				aname = AreaNames[aname]
			end
			
			leng = tonumber(string.len(aname))
			
			if leng > area4maxlen then area4maxlen = leng end
		end
	end
	
	area1header = MakeDashes(area1maxlen)
	area2header = MakeDashes(area2maxlen)
	area3header = MakeDashes(area3maxlen)
	area4header = MakeDashes(area4maxlen)
	
	local title = "Gofer's Level Guide"
	local noteline = "+---------+-" .. area1header .. "-+-" .. area2header .. "-+-" .. area3header .. "-+-" .. area4header .. "-+"

	local leng = tonumber(string.len(title))
	local leng2 = tonumber(string.len(noteline))
	
	local spacing = 0
	local lendif = 0
	
	if leng > leng2 then
	else
		lendif = leng2 - leng
		lendif = lendif * 0.5
	end

	spacing = string.rep(" ", lendif)
	
	ColourNote("cyan", "", spacing, "cyan", "", title)

	Note("")
	
	ColourNote("grey", "", noteline)
	
	area1 = "Area 1"
	area2 = "Area 2"
	area3 = "Area 3"
	area4 = "Area 4"
	
	if area1maxlen == 0 then area1header = MakeSpace(area1, 6) else area1header = MakeSpace(area1, area1maxlen) end

	if area2maxlen == 0 then area2header = MakeSpace(area2, 6) else area2header = MakeSpace(area2, area2maxlen) end

	if area3maxlen == 0 then area3header = MakeSpace(area3, 6) else area3header = MakeSpace(area3, area3maxlen) end

	if area4maxlen == 0 then area4header = MakeSpace(area4, 6) else area4header = MakeSpace(area4, area4maxlen) end

	ColourNote("grey", "", "| ", "cyan", "", " Level ", "grey", "", " | ", "red", "", "Area 1" .. area1header, "grey", "", " | ", "yellow", "", "Area 2"  .. area2header, "grey", "", " | ", "green", "", "Area 3" .. area3header, "grey", "", " | ", "orange", "", "Area 4" .. area4header, "grey", "", " | ")
	ColourNote("grey", "", noteline)
	
	lrange = ""
	
	for i,v in ipairs(CGuideTable) do
		lrange = GetRange(i)
		
		area1, area2, area3, area4 = GetArea(i)

		DisplayRow(lrange, area1, area1maxlen, area2, area2maxlen, area3, area3maxlen, area4, area4maxlen)
	end

	ColourNote("grey", "", noteline)
end -- CompleteGuide

function CompleteGuideCurrentLevel()
	if gmcpcharlevel == nil then 
		ColourNote(msg_colour, "", "GMCP Data has not been populated yet, please try again.")
		
		return
	end
	
	if gmcpcharlevel == 201 then
		ColourNote(msg_colour, "", "This command does not work at level 201.")
		
		return
	end
	
	-- Determines which ranges to show based on user's level
	
	if gmcpcharlevel < 21 then
		currentindex = 1
		minindex = 0
		maxindex = 2
	elseif gmcpcharlevel < 31 then
		currentindex = 2
		minindex = 1
		maxindex = 3	
	elseif gmcpcharlevel < 41 then
		currentindex = 3
		minindex = 2
		maxindex = 4	
	elseif gmcpcharlevel < 51 then
		currentindex = 4
		minindex = 3
		maxindex = 5	
	elseif gmcpcharlevel < 61 then
		currentindex = 5
		minindex = 4
		maxindex = 6	
	elseif gmcpcharlevel < 71 then
		currentindex = 6
		minindex = 5
		maxindex = 7	
	elseif gmcpcharlevel < 81 then
		currentindex = 7
		minindex = 6
		maxindex = 8	
	elseif gmcpcharlevel < 91 then
		currentindex = 8
		minindex = 7
		maxindex = 9	
	elseif gmcpcharlevel < 101 then
		currentindex = 9
		minindex = 8
		maxindex = 10	
	elseif gmcpcharlevel < 111 then
		currentindex = 10
		minindex = 9
		maxindex = 11	
	elseif gmcpcharlevel < 121 then
		currentindex = 11
		minindex = 10
		maxindex = 12	
	elseif gmcpcharlevel < 131 then
		currentindex = 12
		minindex = 11
		maxindex = 13	
	elseif gmcpcharlevel < 141 then
		currentindex = 13
		minindex = 12
		maxindex = 14	
	elseif gmcpcharlevel < 151 then
		currentindex = 14
		minindex = 13
		maxindex = 15	
	elseif gmcpcharlevel < 161 then
		currentindex = 15
		minindex = 14
		maxindex = 16	
	elseif gmcpcharlevel < 171 then
		currentindex = 16
		minindex = 15
		maxindex = 17	
	elseif gmcpcharlevel < 181 then
		currentindex = 17
		minindex = 16
		maxindex = 18	
	elseif gmcpcharlevel < 201 then
		currentindex = 18
		minindex = 17
		maxindex = 19	
	end
	
	-- Determines the maximum character size for each group of areas to help determine spacing for display purposes
	
	area1maxlen = 0
	area2maxlen = 0
	area3maxlen = 0
	area4maxlen = 0
	
	if CGuideTable[minindex] ~= nil then
		if CGuideTable[minindex][1] ~= nil then
			aname = CGuideTable[minindex][1]
			
			isextra, aname2, extra = CheckExtra(aname)
			
			if isextra == "yes" then
				aname = AreaNames[aname2] .. " " .. extra
			else
				aname = AreaNames[aname]
			end
			
			leng = tonumber(string.len(aname))	
			
			if leng > area1maxlen then area1maxlen = leng end
		end
		
		if CGuideTable[minindex][2] ~= nil then
			aname = CGuideTable[minindex][2]
			
			isextra, aname2, extra = CheckExtra(aname)
			
			if isextra == "yes" then
				aname = AreaNames[aname2] .. " " .. extra
			else
				aname = AreaNames[aname]
			end
			
			leng = tonumber(string.len(aname))
			
			if leng > area2maxlen then area2maxlen = leng end
		end
		
		if CGuideTable[minindex][3] ~= nil then
			aname = CGuideTable[minindex][3]
			
			isextra, aname2, extra = CheckExtra(aname)
			
			if isextra == "yes" then
				aname = AreaNames[aname2] .. " " .. extra
			else
				aname = AreaNames[aname]
			end
			
			leng = tonumber(string.len(aname))
			
			if leng > area3maxlen then area3maxlen = leng end
		end
		
		if CGuideTable[minindex][4] ~= nil then
			aname = CGuideTable[minindex][4]
			
			isextra, aname2, extra = CheckExtra(aname)
			
			if isextra == "yes" then
				aname = AreaNames[aname2] .. " " .. extra
			else
				aname = AreaNames[aname]
			end
			
			leng = tonumber(string.len(aname))
			
			if leng > area4maxlen then area4maxlen = leng end
		end
	end
	
	if CGuideTable[currentindex][1] ~= nil then
		aname = CGuideTable[currentindex][1]
		
		isextra, aname2, extra = CheckExtra(aname)
		
		if isextra == "yes" then
			aname = AreaNames[aname2] .. " " .. extra
		else
			aname = AreaNames[aname]
		end
		
		leng = tonumber(string.len(aname))
		
		if leng > area1maxlen then area1maxlen = leng end
	end
	
	if CGuideTable[currentindex][2] ~= nil then
		aname = CGuideTable[currentindex][2]

		isextra, aname2, extra = CheckExtra(aname)
		
		if isextra == "yes" then
			aname = AreaNames[aname2] .. " " .. extra
		else
			aname = AreaNames[aname]
		end
		
		leng = tonumber(string.len(aname))
		
		if leng > area2maxlen then area2maxlen = leng end
	end
	
	if CGuideTable[currentindex][3] ~= nil then
		aname = CGuideTable[currentindex][3]

		isextra, aname2, extra = CheckExtra(aname)
		
		if isextra == "yes" then
			aname = AreaNames[aname2] .. " " .. extra
		else
			aname = AreaNames[aname]
		end
		
		leng = tonumber(string.len(aname))
			
		if leng > area3maxlen then area3maxlen = leng end
	end
	
	if CGuideTable[currentindex][4] ~= nil then
		aname = CGuideTable[currentindex][4]

		isextra, aname2, extra = CheckExtra(aname)
		
		if isextra == "yes" then
			aname = AreaNames[aname2] .. " " .. extra
		else
			aname = AreaNames[aname]
		end
		
		leng = tonumber(string.len(aname))
			
		if leng > area4maxlen then area4maxlen = leng end
	end

	if CGuideTable[maxindex] ~= nil then
		if CGuideTable[maxindex][1] ~= nil then
			aname = CGuideTable[maxindex][1]

			isextra, aname2, extra = CheckExtra(aname)
			
			if isextra == "yes" then
				aname = AreaNames[aname2] .. " " .. extra
			else
				aname = AreaNames[aname]
			end
			
			leng = tonumber(string.len(aname))
			
			if leng > area1maxlen then area1maxlen = leng end
		end
		
		if CGuideTable[maxindex][2] ~= nil then
			aname = CGuideTable[maxindex][2]
			
			isextra, aname2, extra = CheckExtra(aname)
			
			if isextra == "yes" then
				aname = AreaNames[aname2] .. " " .. extra
			else
				aname = AreaNames[aname]
			end
			
			leng = tonumber(string.len(aname))
			
			if leng > area2maxlen then area2maxlen = leng end
		end
		
		if CGuideTable[maxindex][3] ~= nil then
			aname = CGuideTable[maxindex][3]
			
			isextra, aname2, extra = CheckExtra(aname)
			
			if isextra == "yes" then
				aname = AreaNames[aname2] .. " " .. extra
			else
				aname = AreaNames[aname]
			end
			
			leng = tonumber(string.len(aname))
			
			if leng > area3maxlen then area3maxlen = leng end
		end
		
		if CGuideTable[maxindex][4] ~= nil then
			aname = CGuideTable[maxindex][4]
			
			isextra, aname2, extra = CheckExtra(aname)
			
			if isextra == "yes" then
				aname = AreaNames[aname2] .. " " .. extra
			else
				aname = AreaNames[aname]
			end
			
			leng = tonumber(string.len(aname))
			
			if leng > area4maxlen then area4maxlen = leng end
		end
	end
	
	area1header = MakeDashes(area1maxlen)
	area2header = MakeDashes(area2maxlen)
	area3header = MakeDashes(area3maxlen)
	area4header = MakeDashes(area4maxlen)
	
	local title = "Gofer's Level Guide - Current Level: " .. gmcpcharlevel
	local noteline = "+---------+-" .. area1header .. "-+-" .. area2header .. "-+-" .. area3header .. "-+-" .. area4header .. "-+"

	local leng = tonumber(string.len(title))
	local leng2 = tonumber(string.len(noteline))
	
	local spacing = 0
	local lendif = 0
	
	if leng > leng2 then
	else
		lendif = leng2 - leng
		lendif = lendif * 0.5
	end

	spacing = string.rep(" ", lendif)
	
	ColourNote("cyan", "", spacing, "cyan", "", title)

	Note("")
	
	ColourNote("grey", "", noteline)
	
	area1 = "Area 1"
	area2 = "Area 2"
	area3 = "Area 3"
	area4 = "Area 4"
	
	if area1maxlen == 0 then area1header = MakeSpace(area1, 6) else area1header = MakeSpace(area1, area1maxlen) end

	if area2maxlen == 0 then area2header = MakeSpace(area2, 6) else area2header = MakeSpace(area2, area2maxlen) end

	if area3maxlen == 0 then area3header = MakeSpace(area3, 6) else area3header = MakeSpace(area3, area3maxlen) end

	if area4maxlen == 0 then area4header = MakeSpace(area4, 6) else area4header = MakeSpace(area4, area4maxlen) end

	ColourNote("grey", "", "| ", "cyan", "", " Level ", "grey", "", " | ", "red", "", "Area 1" .. area1header, "grey", "", " | ", "yellow", "", "Area 2"  .. area2header, "grey", "", " | ", "green", "", "Area 3" .. area3header, "grey", "", " | ", "orange", "", "Area 4" .. area4header, "grey", "", " | ")
	ColourNote("grey", "", noteline)
	
	if CGuideTable[minindex] ~= nil then
		lrange = GetRange(minindex)
		
		area1, area2, area3, area4 = GetArea(minindex)
		
		DisplayRow(lrange, area1, area1maxlen, area2, area2maxlen, area3, area3maxlen, area4, area4maxlen)
	end

	lrange = GetRange(currentindex)
	
	area1, area2, area3, area4 = GetArea(currentindex)

	DisplayRow(lrange, area1, area1maxlen, area2, area2maxlen, area3, area3maxlen, area4, area4maxlen)
	
	if CGuideTable[maxindex] ~= nil then
		lrange = GetRange(maxindex)
		
		area1, area2, area3, area4 = GetArea(maxindex)
		
		DisplayRow(lrange, area1, area1maxlen, area2, area2maxlen, area3, area3maxlen, area4, area4maxlen)
	end
	
	ColourNote("grey", "", noteline)
end -- CompleteGuideCurrentLevel

function DisplayRow(lrange, area1, area1maxlen, area2, area2maxlen, area3, area3maxlen, area4, area4maxlen)
	if area1maxlen == 0 then
		if area1 == " " then area1space = MakeSpace2(6) else area1space = MakeSpace(area1, 6) end
	else
		if area1 == " " then area1space = MakeSpace2(area1maxlen) else area1space = MakeSpace(area1, area1maxlen) end
	end
	
	if area2maxlen == 0 then
		if area2 == " " then area2space = MakeSpace2(6) else area2space = MakeSpace(area2, 6) end
	else
		if area2 == " " then area2space = MakeSpace2(area2maxlen) else area2space = MakeSpace(area2, area2maxlen) end
	end
	
	if area3maxlen == 0 then
		if area3 == " " then area3space = MakeSpace2(6) else area3space = MakeSpace(area3, 6) end
	else
		if area3 == " " then area3space = MakeSpace2(area3maxlen) else area3space = MakeSpace(area3, area3maxlen) end
	end
	
	if area4maxlen == 0 then
		if area4 == " " then area4space =	 MakeSpace2(6) else area4space = MakeSpace(area4, 6) end
	else
		if area4 == " " then area4space = MakeSpace2(area4maxlen) else area4space = MakeSpace(area4, area4maxlen) end
	end

	ColourNote("grey", "", "| ", "cyan", "", lrange, "grey", "", " | ", "red", "", area1 .. area1space, "grey", "", " | ", "yellow", "", area2 .. area2space, "grey", "", " | ", "green", "", area3 .. area3space, "grey", "", " | ", "orange", "", area4 .. area4space, "grey", "", " | ")
end -- DisplayRow

function GetArea(RangeIndex)
	areaf1 = " "
	areaf2 = " "
	areaf3 = " "
	areaf4 = " "

	if CGuideTable[RangeIndex][1] ~= nil then
		area1 = CGuideTable[RangeIndex][1]
		
		isextra, aname, extra = CheckExtra(area1)
	
		if isextra == "yes" then
			if cgdisplay == "full" then
				areaf1 = AreaNames[aname] .. " " .. extra
			elseif cgdisplay == "keyword" then
				areaf1 = aname .. " " .. extra
			end
		else
			if cgdisplay == "full" then
				areaf1 = AreaNames[area1]
			elseif cgdisplay == "keyword" then
				areaf1 = area1
			end
		end
	end
	
	if CGuideTable[RangeIndex][2] ~= nil then
		area2 = CGuideTable[RangeIndex][2]
		
		isextra, aname, extra = CheckExtra(area2)
	
		if isextra == "yes" then
			if cgdisplay == "full" then
				areaf2 = AreaNames[aname] .. " " .. extra
			elseif cgdisplay == "keyword" then
				areaf2 = aname .. " " .. extra
			end
		else
			if cgdisplay == "full" then
				areaf2 = AreaNames[area2]
			elseif cgdisplay == "keyword" then
				areaf2 = area2
			end
		end
	end

	if CGuideTable[RangeIndex][3] ~= nil then
		area3 = CGuideTable[RangeIndex][3]
		
		isextra, aname, extra = CheckExtra(area3)
	
		if isextra == "yes" then
			if cgdisplay == "full" then
				areaf3 = AreaNames[aname] .. " " .. extra
			elseif cgdisplay == "keyword" then
				areaf3 = aname .. " " .. extra
			end
		else
			if cgdisplay == "full" then
				areaf3 = AreaNames[area3]
			elseif cgdisplay == "keyword" then
				areaf3 = area3
			end
		end
	end

	if CGuideTable[RangeIndex][4] ~= nil then
		area4 = CGuideTable[RangeIndex][4]

		isextra, aname, extra = CheckExtra(area4)
	
		if isextra == "yes" then
			if cgdisplay == "full" then
				areaf4 = AreaNames[aname] .. " " .. extra
			elseif cgdisplay == "keyword" then
				areaf4 = aname .. " " .. extra
			end
		else
			if cgdisplay == "full" then
				areaf4 = AreaNames[area4]
			elseif cgdisplay == "keyword" then
				areaf4 = area4
			end
		end
	end
	
	return areaf1, areaf2, areaf3, areaf4
end -- GetArea

function GetRange(range)
	lrange = ""
	
	if range == 1 then
		lrange = " 01-20 "
	elseif range == 2 then
		lrange = " 21-30 "
	elseif range == 3 then
		lrange = " 31-40 "
	elseif range == 4 then
		lrange = " 41-50 "
	elseif range == 5 then
		lrange = " 51-60 "	
	elseif range == 6 then
		lrange = " 61-70 "
	elseif range == 7 then
		lrange = " 71-80 "
	elseif range == 8 then
		lrange = " 81-90 "
	elseif range == 9 then
		lrange = " 91-100"			
	elseif range == 10 then
		lrange = "101-110"
	elseif range == 11 then
		lrange = "111-120"
	elseif range == 12 then
		lrange = "121-130"
	elseif range == 13 then
		lrange = "131-140"			
	elseif range == 14 then
		lrange = "141-150"
	elseif range == 15 then
		lrange = "151-160"
	elseif range == 16 then
		lrange = "161-170"
	elseif range == 17 then
		lrange = "171-180"
	elseif range == 18 then
		lrange = "181-200"
	end

	return lrange
end -- GetRange

function GetRangeNoSpaces(range)
	lrange = ""
	
	if range == 1 then
		lrange = "01-20"
	elseif range == 2 then
		lrange = "21-30"
	elseif range == 3 then
		lrange = "31-40"
	elseif range == 4 then
		lrange = "41-50"
	elseif range == 5 then
		lrange = "51-60"	
	elseif range == 6 then
		lrange = "61-70"
	elseif range == 7 then
		lrange = "71-80"
	elseif range == 8 then
		lrange = "81-90"
	elseif range == 9 then
		lrange = "91-100"			
	elseif range == 10 then
		lrange = "101-110"
	elseif range == 11 then
		lrange = "111-120"
	elseif range == 12 then
		lrange = "121-130"
	elseif range == 13 then
		lrange = "131-140"			
	elseif range == 14 then
		lrange = "141-150"
	elseif range == 15 then
		lrange = "151-160"
	elseif range == 16 then
		lrange = "161-170"
	elseif range == 17 then
		lrange = "171-180"
	elseif range == 18 then
		lrange = "181-200"
	end

	return lrange
end -- GetRangeNoSpaces

function IndexLookup(range)
	rindex = 0
	
	if range == "01-20" then
		rindex = 1
	elseif range == "21-30" then
		rindex = 2
	elseif range == "31-40" then
		rindex = 3
	elseif range == "41-50" then
		rindex = 4
	elseif range == "51-60" then
		rindex = 5
	elseif range == "61-70" then
		rindex = 6
	elseif range == "71-80" then
		rindex = 7
	elseif range == "81-90" then
		rindex = 8
	elseif range == "91-100" then
		rindex = 9
	elseif range == "101-110" then
		rindex = 10
	elseif range == "111-120" then
		rindex = 11
	elseif range == "121-130" then
		rindex = 12
	elseif range == "131-140" then
		rindex = 13			
	elseif range == "141-150" then
		rindex = 14
	elseif range == "151-160" then
		rindex = 15
	elseif range == "161-170" then
		rindex = 16
	elseif range == "171-180" then
		rindex = 17
	elseif range == "181-200" then
		rindex = 18
	end
	
	return rindex
end

function MakeSpace(title, maxleng)
	local leng = tonumber(string.len(title))
	local leng2 = tonumber(maxleng)
	
	local spacing = 0
	local lendif = 0
	
	if leng > leng2 then
	else
		lendif = leng2 - leng
	end

	spacing = string.rep(" ", lendif)
	return spacing
end -- MakeSpace

function MakeSpace2(maxleng)
	maxleng = maxleng - 1
	spacing = string.rep(" ", maxleng)
	return spacing
end -- MakeSpace2

function MakeDashes(maxleng)
	if maxleng == 0 then
		dashes = string.rep("-", 6)
	else
		dashes = string.rep("-", maxleng)
	end
	
	return dashes
end -- MakeDashes

function GetLevel()
	gmcpchar = gmcp("char.status")
	
	gmcpcharlevel = tonumber(gmcpchar.level)
	gmcpcharalign = tonumber(gmcpchar.align)
end -- GetLevel

function CreateCGuideTable()
	CGuideTable = {}

	CGuideTable[1] = {
		"hatchling",
		"manor",
		"terramire",
		}
	
	CGuideTable[2] = {
		"raga",
		"zangar",
		}

	CGuideTable[3] = {
		"clinic",
		"hedge",
		}
	
	CGuideTable[4] = {
		"nulan",
		"fortress",
		"alehouse",
		}

	CGuideTable[5] = {
		"diatz",
		"alehouse",
		"siege",
		}

	CGuideTable[6] = {
		"siege",
		"bliss",
		"elemental",
		}

	CGuideTable[7] = {
		"quarry",
		"nursing",
		"damned",
		}
		
	CGuideTable[8] = {
		"stuff",
		"peninsula",
		"duskvalley",
		}
		
	CGuideTable[9] = {
		"yarr",
		"northstar(training)",
		}
		
	CGuideTable[10] = {
		"northstar(training)",
		"dynasty",
		}
		
	CGuideTable[11] = {
		"imagi",
		"desolation",
		"diner",
		}

	CGuideTable[12] = {
		"diner",
		"nanjiki",
		"ddoom",
		"unearthly",
		}

	CGuideTable[13] = {
		"unearthly",
		"helegear",
		"adaldar",
		}

	CGuideTable[14] = {
		"origins",
		"annwn(door undine)",
		"dunoir",
		}
		
	CGuideTable[15] = {
		"dunoir",
		"dread",
		"avian",
		}
		
	CGuideTable[16] = {
		"empyrean",
		"cove",
		}

	CGuideTable[17] = {
		"empyrean",
		"umari",
		}

	CGuideTable[18] = {
		"umari",
		"oceanpark",
		"qong",
		"temple",
		}
	
end -- CreateCGuideTable

function clevel_help()	
	local title = "Tallimos' Level Guide v" .. PLUGIN_VERSION .. " Help"
	local title2 = noteline
	
	local leng = tonumber(string.len(title))
	local leng2 = tonumber(string.len(title2))
	
	local spacing = 0
	local lendif = 0
	
	if leng > leng2 then
	else
		lendif = leng2 - leng
		lendif = lendif * 0.5
	end

	spacing = string.rep(" ", lendif)
	
	ColourNote(help_colour, "", spacing, help_command_colour, "", title)
	ColourNote(help_colour, "", noteline)
	ColourNote(help_colour, "", "This plugin gives the user a quick access level guide")
	ColourNote(help_colour, "", noteline)

	ColourNote(help_command_colour, "", "cguide                         ", help_colour, "", " - displays the complete Gofer's Level Guide")
	
	ColourNote(help_command_colour, "", "cguide add <range> <keyword> ", optional_colour, "", "(optional instructions)")
	ColourNote(help_colour, "", "                             	  - adds an area to Gofer's Level Guide")
	ColourNote(help_colour, "", "                             	  - enter ", help_command_colour, "", "range", help_colour, "", " as it appears in the guide. For example: '", help_command_colour, "", "91-100", help_colour, "", "'")
	ColourNote(help_colour, "", "                             	  - ", optional_colour, "", "(optional instructions)", help_colour, "", " can be like door <mob> but is limited to 12 characters")
	
	ColourNote(help_command_colour, "", "cguide remove <range> <keyword>", help_colour, "", " - remove an area from Gofer's Level Guide")
	
	ColourNote(help_command_colour, "", "cguide display                 ", help_colour, "", " - toggled the desired display type for cguide commands")
	
	ColourNote(help_command_colour, "", "cguide display (full|keyword)  ", help_colour, "", " - directly sets the desired display type for cguide commands")
	
	ColourNote(help_command_colour, "", "cguide keyword <letter>        ", help_colour, "", " - displays area keywords beginning with <letter>")
	
	ColourNote(help_command_colour, "", "lguide                         ", help_colour, "", " - displays the level range from Gofer's Level Guide for your current level")
	
	ColourNote(help_command_colour, "", "clevel                         ", help_colour, "", " - displays the top 5 mobs killed based on user settings using mobdeaths")
	ColourNote(help_colour, "", "                                  If character is good/evil the command will display the opposite aligned mobs")
	ColourNote(help_colour, "", "                                  If character is neutral the user is instructed to use one of the commands below")
	
	ColourNote(help_command_colour, "", "clevele                        ", help_colour, "", " - similar to clevel but displays evil aligned mobs killed")

	ColourNote(help_command_colour, "", "clevelg                        ", help_colour, "", " - similar to clevel bud displays good aligned mobs killed")
	
	ColourNote(help_command_colour, "", "cleveln                        ", help_colour, "", " - displays the top 5 mobs with no align restriction")
	
	ColourNote(help_command_colour, "", "clevel display                 ", help_colour, "", " - toggled the desired display type for clevel commands")
	
	ColourNote(help_command_colour, "", "clevel display (mobs|area)     ", help_colour, "", " - directly sets the desired display type for clevel commands")
	
	ColourNote(help_command_colour, "", "clevel min <level>             ", help_colour, "", " - sets minimum level in the level range for the clevel commands")
	
	ColourNote(help_command_colour, "", "clevel max <level>             ", help_colour, "", " - sets maximum level in the level range for the clevel commands")
	
	ColourNote(help_colour, "", noteline)
	Note("")
end	-- clevel_help

function OnPluginBroadcast (msg, id, name, text)
   -- Look for GMCP handler.
	if (id == "3e7dedbe37e44942dd46d264") then
		if (text == "char.status") then -- the GMCP Handler plugin says "I got a new char.status!"
			charstatus = gmcp("char.status")
	
			gmcpcharlevel = tonumber(charstatus.level)
			gmcpcharalign = tonumber(charstatus.align)
		end
	end
end

function OnPluginEnable ()
    if IsConnected() then
		GetLevel()
	end
	
	GetSavedData()
end

function OnPluginInstall ()
	PLUGIN_VERSION  = GetPluginInfo(GetPluginID(), 19)
	PLUGIN_NAME   = GetPluginInfo(GetPluginID(), 1)

    if IsConnected() then
		GetLevel()
	end
	
	GetSavedData()
	
	ColourNote(help_colour, "", "Thank you for installing ", qty_colour, "", "Tallimos' Level Guide v" ..  PLUGIN_VERSION, help_colour, "", ". Please see ", help_command_colour, "", "clevel help", help_colour, "", " for more information.")
	Note("")
end

function OnPluginSaveState ()
	SetVariable ("cgdisplay", "cgdisplay = " .. serialize.save_simple (cgdisplay))
	SetVariable ("mbdisplay", "mbdisplay = " .. serialize.save_simple (mbdisplay))
	SetVariable ("mbminlevel", "mbminlevel = " .. serialize.save_simple (mbminlevel))
	SetVariable ("mbmaxlevel", "mbmaxlevel = " .. serialize.save_simple (mbmaxlevel))
	SetVariable ("CGuideTable", "CGuideTable = " .. serialize.save_simple (CGuideTable))

	SetVariable ("pastfirstinstall", "true")
end -- OnPluginSaveState

function GetSavedData()
	if GetVariable ("pastfirstinstall") == "true" then
		assert (loadstring (GetVariable ("cgdisplay") or "")) ()
		assert (loadstring (GetVariable ("mbdisplay") or "")) ()
		assert (loadstring (GetVariable ("mbminlevel") or "")) ()
		assert (loadstring (GetVariable ("mbmaxlevel") or "")) ()
		assert (loadstring (GetVariable ("CGuideTable") or "")) ()
	else
		mbdisplay =  "mobs"
		mbminlevel = 15
		mbmaxlevel = 25
		cgdisplay = "full"
		
		CreateCGuideTable()
	end
	
	-- Borrowed for SnD
	AreaNames = {
		-- A --
		["aardington"] = "Aardington Estate",
		["academy"] = "Academy",
		["adaldar"] = "Battlefields of Adaldar",
		["afterglow"] = "Afterglow",
		["agroth"] = "Marshlands of Agroth",
		["ahner"] = "Kingdom of Ahner",
		["alehouse"] = "Wayward Alehouse",
		["amazon"] = "Amazon Nation",
		["amusement"] = "Amusement Park",
		["andarin"] = "Blighted Tundra of Andarin",
		["annwn"] = "Annwn",
		["anthrox"] = "Anthrox",
		["arena"] = "Gladiator's Arena",
		["arisian"] = "Arisian Realm",
		["ascent"] = "First Ascent",
		["astral"] = "Astral Travels",
		["atlantis"] = "Atlantis",
		["autumn"] = "Eternal Autumn",
		["avian"] = "Avian Kingdom",
		["aylor"] = "Grand City Aylor",
		-- B --
		["badtrip"] = "Bad Trip",
		["bazaar"] = "Onyx Bazaar",
		["beer"] = "Land of Beer Goblins",
		["believer"] = "Path of the Believer",
		["blackrose"] = "Black Rose",
		["bliss"] = "Wedded Bliss",
		["bonds"] = "Unearthly Bonds",
		-- C --
		["caldera"] = "Icy Caldera Mauldoon",
		["callhero"] = "Call of Heroes",
		["camps"] = "Tournament Camps",
		["canyon"] = "Canyon Memorial Hospital",
		["caravan"] = "Gypsy Caravan",
		["cards"] = "House of Cards",
		["carnivale"] = "Olde Worlde Carnivale",
		["cataclysm"] = "Cataclysm",
		["cathedral"] = "Old Cathedral",
		["cats"] = "Sheila's Cat Sanctuary",
		["chasm"] = "Chasm and Catacombs",
		["chessboard"] = "Chessboard",
		["childsplay"] = "Child's Play",
		["cineko"] = "Aerial City of Cineko",
		["citadel"] = "Flying Citadel",
		["clinic"] = "Tilule Rehabilitation Clinic",
		["conflict"] = "Thandeld's Conflict",
		["coral"] = "Coral Kingdom",
		["cougarian"] = "Cougarian Queendom",
		["cove"] = "Kiksaadi Cove",
		["cradle"] = "Cradlebrook",
		["crynn"] = "Crynn's Church",
		-- D --
		["damned"] = "Halls of the Damned",
		["darklight"] = "Darklight",
		["darkside"] = "Darkside Fractured Lands",
		["ddoom"] = "Desert Doom",
		["deadlights"] = "Deadlights",
		["deathtrap"] = "Deathtrap Dungeon",
		["deneria"] = "Realm of Deneria",
		["desert"] = "Desert Prison",
		["desolation"] = "Mountains of Desolation",
		["dhalgora"] = "Dhal'Gora Outlands",
		["diatz"] = "Three Pillars Diatz",	
		["diner"] = "Tumari's Diner",
		["dortmund"] = "Dortmund",
		["drageran"] = "Drageran Empire",
		["dread"] = "Dread Tower",
		["dsr"] = "Diamond Soul Revelation",
		["dundoom"] = "Dungeon Doom",
		["dunoir"] = "Mount DuNoir",
		["duskvalley"] = "Dusk Valley",
		["dynasty"] = "Eighteenth Dynasty",
		-- E --
		["earthlords"] = "Earth Lords",
		["earthplane"] = "Earth Plane 4",
		["elemental"] = "Elemental Chaos",
		["empire"] = "Empire of Aiighialla",
		["empyrean"] = "Empyrean, Streets of Downfall",
		["entropy"] = "Archipelago Entropy",
		-- F --
		["fantasy"] = "Fantasy Fields",
		["farm"] = "Kimr's Farm",
		["fayke"] = "All in Fayke Day",
		["fens"] = "Curse Midnight Fens",
		["fields"] = "Killing Fields",
		["firebird"] = "Realm of the Firebird",
		["firenation"] = "Realm of the Sacred Flame",
		["fireswamp"] = "Fire Swamp",
		["fortress"] = "Goblin Fortress",
		["fractured"] = "Fractured Lands",
		["ft1"] = "Faerie Tales",
		["ftii"] = "Faerie Tales II FT2",
		-- G --
		["gallows"] = "Gallows Hill",
		["gathering"] = "Gathering Horde",
		["gauntlet"] = "Gauntlet",
		["genie"] = "Genie's Last Wish",
		["gilda"] = "Gilda and the Dragon",
		["glamdursil"] = "Glamdursil",
		["glimmerdim"] = "Brightsea Glimmerdim",
		["gnomalin"] = "Cloud City of Gnomalin",
		["goldrush"] = "Gold Rush",
		["graveyard"] = "Graveyard",
		["greece"] = "Ancient Greece",
		["gwillim"] = "Trouble with Gwillimberry",
		-- H --
		["hatchling"] = "Hatchling Aerie",
		["hawklord"] = "Realm of the Hawklords",
		["hedge"] = "Hedgehog's Paradise",
		["helegear"] = "Helegear Sea",
		["hell"] = "Descent to Hell",
		["hoard"] = "Swordbreaker's Hoard",
		["hodgepodge"] = "Magical Hodgepodge",
		["horath"] = "Broken Halls of Horath",
		["horizon"] = "Nebulous Horizon",
		-- I --
		["icefall"] = "Icefall",
		["illoria"] = "Illoria",
		["imagi"] = "Imagi's Nation",
		["imperial"] = "Imperial Nation",
		["infamy"] = "Realm of Infamy",
		["inferno"] = "Journey to the Inferno",
		["infest"] = "Infestation",
		["insan"] = "Insanitaria",
		-- J --
		["jenny"] = "Jenny's Tavern",
		["jotun"] = "Jotunheim",
		-- K --
		["kearvek"] = "Keep of Kearvek",
		["kerofk"] = "Kerofk",
		["ketu"] = "Ketu Uplands",
		["kingsholm"] = "Kingsholm",
		["knossos"] = "Great City of Knossos",
		["kobaloi"] = "Keep of the Kobaloi",
		["kultiras"] = "Kul Tiras",
		-- L --
		["lab"] = "Chaprenula's Laboratory",
		["labyrinth"] = "Labyrinth",
		["lagoon"] = "Black Lagoon",
		["landofoz"] = "Land of Oz",
		["laym"] = "Tai'rha Laym",
		["legend"] = "Land of Legend LoL",
		["lemdagor"] = "Storm Ships of Lem-Dagor",
		["lidnesh"] = "Forest of Li'Dnesh",
		["livingmine"] = "Living Mines of Dak'Tai",
		["longnight"] = "Into the Long Night",
		["losttime"] = "Island of Lost Time",
		["lplanes"] = "Lower Planes",
		-- M --
		["maelstrom"] = "Maelstrom",
		["manor"] = "Death's Manor",
		["masq"] = "Masquerade Island",
		["mayhem"] = "Artificer's Mayhem",
		["melody"] = "Art of Melody",
		["minos"] = "Shadows of Minos",
		["mistridge"] = "Covenant of Mistridge",
		["monastery"] = "Monastery",
		["mudwog"] = "Mudwog's Swamp",
		-- N --
		["nanjiki"] = "Nanjiki Ruins",
		["necro"] = "Necromancer's Guild",
		["nenukon"] = "Nenukon and the Far Country",
		["newthalos"] = "New Thalos",
		["northstar"] = "Northstar",
		["nottingham"] = "Nottingham",
		["nulan"] = "Plains of Nulan'Boar",
		["nursing"] = "Ascension Bluff Nursing Home",
		["nynewoods"] = "Nyne Woods",
		-- O --
		["oc"] = "Oradrin's Chosen",
		["oceanpark"] = "Ocean Adventure Park",
		["omentor"] = "Witches of Omen Tor",
		["origins"] = "Tribal Origins",
		["orlando"] = "Hotel Orlando",
		-- P --
		["paradise"] = "Paradise Lost",
		["peninsula"] = "Tairayden Peninsula",
		["petstore"] = "Giant's Pet Store",
		["pompeii"] = "Pompeii",
		["promises"] = "Foolish Promises",
		["prosper"] = "Prosper's Island",
		-- Q --
		["qong"] = "Qong",
		["quarry"] = "Gnoll's Quarry",
		-- R --		
		["radiance"] = "Radiance Woods",
		["raga"] = "Raganatittu",
		["raukora"] = "Blood Opal of Rauko'ra",
		["rebellion"] = "Rebellion Nix",
		["remcon"] = "Reman Conspiracy",
		["reme"] = "City of Reme",
		["rosewood"] = "Rosewood Castle",
		["ruins"] = "Ruins of Diamond Reach",
		-- S --
		["sagewood"] = "Sagewood Grove",
		["sahuagin"] = "Abyssal Caverns of Sahuagin",
		["salt"] = "Great Salt Flats",
		["sanctity"] = "Sanctity of Eternal Damnation",
		["sanctum"] = "The Blood Sanctum",
		["sandcastle"] = "Sho'aram Castle in the Sand",
		["sanguine"] = "Sanguine Tavern",
		["scarred"] = "Scarred Lands",
		["sendhian"] = "Adventures in Sendhia",
		["sennarre"] = "Sen'narre Lake",
		["shouggoth"] = "Temple of Shouggoth",
		["siege"] = "Kobold Seige Camp",
		["sirens"] = "Siren's Oasis Resort",
		["slaughter"] = "Slaughterhouse",
		["snuckles"] = "Snuckles Village",
		["soh"] = "School of Horror SOH1",
		["sohtwo"] = "School of Horror SOH2",
		["solan"] = "Town of Solan",
		["songpalace"] = "Palace of Song",
		["spyreknow"] = "Guardian's Spyre of Knowledge",
		["stone"] = "Fabled City of Stone",
		["storm"] = "Storm Mountain",
		["stormhaven"] = "Ruins of Stormhaven",
		["stronghold"] = "Dark Elf Stronghold DES",
		["stuff"] = "Stuff of Shadows",
		-- T --
		["takeda"] = "Takeda's Warcamp",
		["talsa"] = "Empire of Talsa",
		["temple"] = "Temple of Shal'indrael",
		["tanra"] = "Tanra'vea",
		["terra"] = "Cracks of Terra",
		["terramire"] = "Fort Terramire",
		["thieves"] = "Den of Thieves",
		["times"] = "Intrigues of Times Past",
		["tirna"] = "Tir na Nog",
		["titan"] = "Titans' Keep",
		["tol"] = "Tree of Life",
		["trans"] = "Transcendence",
		["tombs"] = "Relinquished Tombs",
		-- U --
		["umari"] = "Umari's Castle",
		["underdark"] = "Underdark",
		["unearthly"] = "Unearthly Bonds",
		["uplanes"] = "Upper Planes",
		["uprising"] = "Uprising",
		-- V --
		["vale"] = "Sundered Vale",
		["verdure"] = "Verdure Estate",
		["verume"] = "Jungles of Verume",
		["village"] = "Peaceful Giant Village",
		["vlad"] = "Vlad Shamir",
		["volcano"] = "Silver Volcano",
		-- W --
		["weather"] = "Weather Observatory",
		["werewood"] = "Were Wood",
		["wildwood"] = "Wildwood",
		["winds"] = "Winds of Fate",
		["winter"] = "Winterlands",
		["wizards"] = "War of the Wizards WoW",
		["wonders"] = "Seven Wonders",
		["wooble"] = "Wobbly Woes of Woobleville",
		["woodelves"] = "Wood Elves of Nalondir",
		["wtc"] = "Warrior Training Camp WTC",
		["wyrm"] = "Council of the Wyrm",
		-- X --
		["xmas"] = "Christmas Vacation",
		["xylmos"] = "Xyl's Mosaic",
		-- Y --
		["yarr"] = "Misty Shores of Yarr",
		["ygg"] = "Yggdrasil: The World Tree",
		["yurgach"] = "Yurgach Domain",
		-- Z --
		["zangar"] = "Zangar's Demonic Grotto",
		["zodiac"] = "Realm of the Zodiac",
		["zoo"] = "Aardwolf Zoological Park",
		["zyian"] = "Dark Temple of Zyian",
	}
	
	SaveState()
end

]]>
</script>
</muclient>
