<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Thursday, October 14, 2021, 2:58 PM -->
<!-- MuClient version 5.07-pre -->

<!-- Plugin "Tallimos_Omphalon_Window" generated by Plugin Wizard -->

<muclient>
<plugin
   name="Tallimos_Omphalon_Window"
   author="Tallimos"
   id="156eade47c7b06809670d61a"
   language="Lua"
   purpose="Little script for Omphalon to display status of certain skills and spells"
   save_state="y"
   date_written="2021-10-14 14:57:48"
   requires="4.36"
   version="1.0"
   >

</plugin>


<!--  Get our standard constants -->

<include name="constants.lua"/>

<!--  Triggers  -->

<triggers>
	<trigger
		script="AuraWornCheck"
		match="^(.*?) begins floating around you.$"
		regexp="y"
		sequence="100"
		enabled="y"
		>
	</trigger>
	<trigger
		script="AuraRemovedCheck"
		match="^(.*?) stops floating around you.$"
		regexp="y"
		sequence="100"
		enabled="y"
		>
	</trigger>
	<trigger
		script="InvisRemovedCheck"
		match="^You remove (.*?) from your (left|ring) finger.$"
		regexp="y"
		sequence="100"
		enabled="y"
		>
	</trigger>
	<trigger
		script="InvisWornCheck"
		match="^You wear (.*?) on your (left|right) finger.$"
		regexp="y"
		sequence="100"
		enabled="y"
		>
	</trigger>
	-- Learned Triggers
	
	<trigger
		group="SpellListLearned"
		match="^\{spellheaders learned\}$"
		omit_from_output="y"
		regexp="y"
		sequence="100"
		>
	</trigger>
	<trigger
		group="SpellListLearned"
		script="SpellListOffLearned"
		match="^\{\/spellheaders\}$"
		omit_from_output="y"
		regexp="y"
		sequence="100"
		>
	</trigger>
	<trigger
		script="GrabSpellLearned"
		group="SpellListLearned"
		match="^(\d+)\,(.*?)\,(\d+)\,(\d+)\,(\d+)\,-?(\d+)\,(\d+)$"
		omit_from_output="y"
		regexp="y"
		sequence="100"
		>
	</trigger>	
	<trigger
		group="SpellListLearned"
		match="^\{recoveries recoveries\}$"
		omit_from_output="y"
		regexp="y"
		sequence="100"
		>
	</trigger>  
	<trigger
		group="SpellListLearned"
		script="RecoveryListOff"
		match="^\{\/recoveries\}$"
		omit_from_output="y"
		regexp="y"
		sequence="100"
		>
	</trigger>
	<trigger
		group="SpellListLearned"
		match="^(\d+)\,(.*?),(\d+)$"
		omit_from_output="y"
		regexp="y"
		sequence="105"
		>
	</trigger>
	<trigger
		script="PracticeCheck"
		group="PracticeCheck"
		match="^You are now an expert in (.*?).$"
		regexp="y"
		sequence="100"
		enabled="y"
		>
	</trigger>
	<trigger
		script="PracticeCheck"
		group="PracticeCheck"
		match="^Your new skill level in (.*?) is (\d+)\%.$"
		regexp="y"
		sequence="100"
		enabled="y"
		>
	</trigger>
	<trigger
		script="AffectedFlags"
		group="AFlags"
		match="^Affect Flags: (.*?)$"
		enabled="n"
		sequence="100"
		regexp="y"
		omit_from_output="y"
		>
	</trigger>
	<trigger
		script="AffectedFlags"
		group="AFlags"
		match="^\s+(.*?)$"
		enabled="n"
		sequence="105"
		regexp="y"
		omit_from_output="y"
		>
	</trigger>
	<trigger
		script="AffectedFlagsOff"
		group="AFlags"
		match="^Affected Flags Check End$"
		enabled="n"
		sequence="100"
		regexp="y"
		omit_from_output="y"
		>
	</trigger>
-- Spell Off Triggers
	<trigger
		script="HideOff"
		match="^You are no longer hidden.$"
		enabled="y"
		sequence="100"
		regexp="y"
		>
	</trigger>
	<trigger
		script="HideOff"
		match="^You no longer blend with your surroundings.$"
		enabled="y"
		sequence="100"
		regexp="y"
		>
	</trigger>
	<trigger
		script="SancOff"
		match="^Your brilliant white aura of sanctuary shimmers and is gone.$"
		enabled="y"
		sequence="100"
		regexp="y"
		>
	</trigger>
	<trigger
		script="InvisOff"
		match="^You fade into existence.$"
		enabled="y"
		sequence="100"
		regexp="y"
		>
	</trigger>
	<trigger
		script="InvisOff"
		match="^You are no longer invisible.$"
		enabled="y"
		sequence="100"
		regexp="y"
		>
	</trigger>
	<trigger
		script="SneakOff"
		match="^You emerge from the shadows.$"
		enabled="y"
		sequence="100"
		regexp="y"
		>
	</trigger>
	<trigger
		script="SneakOff"
		match="^You are no longer merged with the shadows.$"
		enabled="y"
		sequence="100"
		regexp="y"
		>
	</trigger>

-- Spell On Triggers
	<trigger
		script="HideOn"
		match="^You are now blended with your surroundings.$"
		enabled="y"
		sequence="100"
		regexp="y"
		>
	</trigger>
	<trigger
		script="SancOn"
		match="^You are surrounded by a shimmering white aura of divine protection.$"
		enabled="y"
		sequence="100"
		regexp="y"
		>
	</trigger>
	<trigger
		script="InvisOn"
		match="^You fade out of existence.$"
		enabled="y"
		sequence="100"
		regexp="y"
		>
	</trigger>
	<trigger
		script="SneakOn"
		match="^You now move silently in the shadows.$"
		enabled="y"
		sequence="100"
		regexp="y"
		>
	</trigger>
	<trigger
		script="SneakOn"
		match="^You now move silently.$"
		enabled="y"
		sequence="100"
		regexp="y"
		>
	</trigger>
</triggers>

<!--  Aliases  -->

<aliases>
	<alias
		script="CommandMenu"
		match="^(?:tow) (.*?)$"
		enabled="y"
		ignore_case="y"
		regexp="y"
		sequence="105"
		>
	</alias>
</aliases>

<!--  Script  -->

<script>
<![CDATA[
require "serialize"
require "gmcphelper"
require "themed_miniwindows"
require "commas"

local msg_colour      = "lightslategrey"
local err_colour      = "firebrick"
local help_colour     = "lightslategrey"
local qty_colour      = "cyan"
local optional_colour = "lightcoral"
local command_colour  = "white"
local cmd_required    = "royalblue"
local help_command_colour  = "red"

local noteline = "=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-="

ran = false

function CommandMenu(name, line, wc)
	commandline = trim(string.lower(wc[1]))
	wordtable = utils.split (commandline, " ")

	cmd = wordtable[1]
	
	if cmd == "affect" or cmd == "affected" then
		-- ColourNote(msg_colour, "", "Checking status of skills/spells")
		statuscheck = "yes"
		
		CheckStatus()
	elseif cmd == "learned" then
		learnedcheck = "yes"
		
		SpellListOnLearned()
	elseif cmd == "on" then
		CreateWindow()
	
		ColourNote(msg_colour, "", "Omphalon's Window been initialized.")
	elseif cmd == "off" then
		if my_window ~= nil then
			DeleteWindow()
			
			ColourNote(msg_colour, "", "Omphalon's Window has been deactivated.")
		end
	elseif cmd == "invis" then
		attrib = wordtable[2]
		
		if attrib == "add" then
			wordcount = 0
			ename = nil
			
			for i,v in ipairs(wordtable) do
				wordcount = wordcount + 1
			end
			
			for x = 3, wordcount, 1 do
				if ename == nil then
					ename = wordtable[x]
				else
					ename = ename .. " " .. wordtable[x]
				end
			end

			invisname = ename
			
			ColourNote(msg_colour, "", "Invis Ring name has been set to ", qty_colour, "", invisname)
		elseif attrib == "remove" then
			ColourNote(msg_colour, "", "Invis Ring name has been removed.")
			
			invisname = "N/A"
		else
			if invisname == "N/A" then
				ColourNote(msg_colour, "", "You have not set a name for your invis ring.")
			else
				ColourNote(msg_colour, "", "You have set the invis ring name to ", qty_colour, "", invisname)
			end
		end
	elseif cmd == "sanc" then
		attrib = wordtable[2]
		
		if attrib == "add" then
			wordcount = 0
			ename = nil
			
			for i,v in ipairs(wordtable) do
				wordcount = wordcount + 1
			end
			
			for x = 3, wordcount, 1 do
				if ename == nil then
					ename = wordtable[x]
				else
					ename = ename .. " " .. wordtable[x]
				end
			end

			sancname = ename
			
			ColourNote(msg_colour, "", "Sanctuary Aura name has been set to ", qty_colour, "", sancname)
		elseif attrib == "remove" then
			ColourNote(msg_colour, "", "Sanctuary Aura name has been removed.")
			
			sancname = "N/A"
		else
			if sancname == "N/A" then
				ColourNote(msg_colour, "", "You have not set a name for your sanctuary aura.")
			else
				ColourNote(msg_colour, "", "You have set the sanctuary aura name to ", qty_colour, "", sancname)
			end
		end
	elseif cmd == "display" then
		attrib = wordtable[2]
		
		if attrib == "sanc" then
			status = wordtable[3]
			
			if status == "on" then
				if sancdisplay == "yes" then
					ColourNote(msg_colour, "", "Sanctuary status display has already been turned ", qty_colour, "", "ON", msg_colour, "", ".")
				else
					sancdisplay = "yes"
				
					ColourNote(msg_colour, "", "Sanctuary status display has been turned ", qty_colour, "", "ON", msg_colour, "", ".")
				end
			elseif status == "off" then
				if sancdisplay == "no" then
					ColourNote(msg_colour, "", "Sanctuary status display has already been turned ", qty_colour, "", "OFF", msg_colour, "", ".")
				else
					sancdisplay = "no"
				
					ColourNote(msg_colour, "", "Sanctuary status display has been turned ", qty_colour, "", "OFF", msg_colour, "", ".")
				end
			else
				if sancdisplay == "no" then
					sancdisplay = "yes"
				
					ColourNote(msg_colour, "", "Sanctuary status display has been turned ", qty_colour, "", "ON", msg_colour, "", ".")
				elseif sancdisplay == "yes" then
					sancdisplay = "no"
				
					ColourNote(msg_colour, "", "Sanctuary status display has been turned ", qty_colour, "", "OFF", msg_colour, "", ".")
				end
			end
		elseif attrib == "invis" then
			status = wordtable[3]
			
			if status == "on" then
				if invisdisplay == "yes" then
					ColourNote(msg_colour, "", "Invis status display has already been turned ", qty_colour, "", "ON", msg_colour, "", ".")
				else
					invisdisplay = "yes"
				
					ColourNote(msg_colour, "", "Invis status display has been turned ", qty_colour, "", "ON", msg_colour, "", ".")
				end
			elseif status == "off" then
				if invisdisplay == "no" then
					ColourNote(msg_colour, "", "Invis status display has already been turned ", qty_colour, "", "OFF", msg_colour, "", ".")
				else
					invisdisplay = "no"
				
					ColourNote(msg_colour, "", "Invis status display has been turned ", qty_colour, "", "OFF", msg_colour, "", ".")
				end
			else
				if invisdisplay == "no" then
					invisdisplay = "yes"
				
					ColourNote(msg_colour, "", "Invis status display has been turned ", qty_colour, "", "ON", msg_colour, "", ".")
				elseif invisdisplay == "yes" then
					invisdisplay = "no"
				
					ColourNote(msg_colour, "", "Invis status display has been turned ", qty_colour, "", "OFF", msg_colour, "", ".")
				end
			end
		elseif attrib == "hide" then
			status = wordtable[3]
			
			if status == "on" then
				if hidedisplay == "yes" then
					ColourNote(msg_colour, "", "Hidden status display has already been turned ", qty_colour, "", "ON", msg_colour, "", ".")
				else
					hidedisplay = "yes"
				
					ColourNote(msg_colour, "", "Hidden status display has been turned ", qty_colour, "", "ON", msg_colour, "", ".")
				end
			elseif status == "off" then
				if hidedisplay == "no" then
					ColourNote(msg_colour, "", "Hidden status display has already been turned ", qty_colour, "", "OFF", msg_colour, "", ".")
				else
					hidedisplay = "no"
				
					ColourNote(msg_colour, "", "Hidden status display has been turned ", qty_colour, "", "OFF", msg_colour, "", ".")
				end
			else
				if hidedisplay == "no" then
					hidedisplay = "yes"
				
					ColourNote(msg_colour, "", "Hidden status display has been turned ", qty_colour, "", "ON", msg_colour, "", ".")
				elseif hidedisplay == "yes" then
					hidedisplay = "no"
				
					ColourNote(msg_colour, "", "Hidden status display has been turned ", qty_colour, "", "OFF", msg_colour, "", ".")
				end
			end
		elseif attrib == "sneak" then
			status = wordtable[3]
			
			if status == "on" then
				if sneakdisplay == "yes" then
					ColourNote(msg_colour, "", "Sneak/Shadow form status display has already been turned ", qty_colour, "", "ON", msg_colour, "", ".")
				else
					sneakdisplay = "yes"
				
					ColourNote(msg_colour, "", "Sneak/Shadow form status display has been turned ", qty_colour, "", "ON", msg_colour, "", ".")
				end
			elseif status == "off" then
				if sneakdisplay == "no" then
					ColourNote(msg_colour, "", "Sneak/Shadow form status display has already been turned ", qty_colour, "", "OFF", msg_colour, "", ".")
				else
					sneakdisplay = "no"
				
					ColourNote(msg_colour, "", "Sneak/Shadow form status display has been turned ", qty_colour, "", "OFF", msg_colour, "", ".")
				end
			else
				if sneakdisplay == "no" then
					sneakdisplay = "yes"
				
					ColourNote(msg_colour, "", "Sneak/Shadow form status display has been turned ", qty_colour, "", "ON", msg_colour, "", ".")
				elseif sneakdisplay == "yes" then
					sneakdisplay = "no"
				
					ColourNote(msg_colour, "", "Sneak/Shadow form status display has been turned ", qty_colour, "", "OFF", msg_colour, "", ".")
				end
			end		
		else
			ColourNote(msg_colour, "", "Invalid option, please see ", qty_colour, "", "tow help", msg_colour, "", " for more information.")
			
			return
		end
		
		if my_window ~= nil then
			ReDrawWindow()
		end
	elseif cmd == "help" then
		TowHelp()
	else
		ColourNote(msg_colour, "", "Invalid option, please see ", qty_colour, "", "tow help", msg_colour, "", " for more information.")
	end
	
	SaveState()
end -- CommandMenu

function PracticeCheck(name, line, wc)
	sname = string.lower(wc[1])
	
	if sname == "shadow form" then
		shadowlearned = "yes"
	elseif sname == "sneak" then
		sneaklearned = "yes"
	elseif sname == "invis" then
		invislearned = "yes"
	elseif sname == "hide" then
		hidelearned = "yes"
	elseif sname == "chameleon power" then
		chamlearned = "yes"
	elseif sname == "sanctuary" then
		sanclearned = "yes"
	end
end

function CheckStatus()
	world.EnableGroup ("AFlags", 1)

	if shadowlearned == "yes" or sneaklearned == "yes" then
		sneakstatus = "OFF"
	end
	
	if invislearned == "yes" or invisname ~= "N/A" then
		invisstatus = "OFF"
	end
	
	if sanclearned == "YES" or sancname ~= "N/A" then
		sancstatus = "OFF"
	end
	
	if hidelearned == "YES" or chamlearned == "YES" then
		hidestatus = "OFF"
	end
	
	SendNoEcho("aflag")
	SendNoEcho("echo Affected Flags Check End")
end

function AffectedFlagsOff()
	world.EnableGroup ("AFlags", 0)
	
	if my_window ~= nil then
		ReDrawWindow()
	end
	
	if statuscheck == "yes" then
		statuscheck = "no"
		
		ColourNote(msg_colour, "", "Status of skills/spells has been updated.")
	end
end

function AffectedFlags(name, line, wc)
	spelllist = trim(string.lower(wc[1]))
	wordtable = utils.split (spelllist, ",")

	for i,v in pairs(wordtable) do
		spell = v
		
		spell = spell:gsub(" ", "")
		
		if spell == "invis" then
			invisstatus = "ON"
		elseif spell == "sanctuary" then
			sancstatus = "ON"
		elseif spell == "hidden" then
			hidestatus = "ON"
		elseif spell == "sneaking" then
			sneakstatus = "ON"
		end
	end
end

function InvisOff()
	invisstatus = "OFF"
	
	if my_window ~= nil then
		ReDrawWindow()
	end
end

function InvisOn()
	invisstatus = "ON"
	
	if my_window ~= nil then
		ReDrawWindow()
	end
end

function SneakOff()
	sneakstatus = "OFF"
	
	if my_window ~= nil then
		ReDrawWindow()
	end
end

function SneakOn()
	sneakstatus = "ON"
	
	if my_window ~= nil then
		ReDrawWindow()
	end
end

function SancOff()
	CheckStatus()
end

function SancOn()
	sancstatus = "ON"
	
	if my_window ~= nil then
		ReDrawWindow()
	end
end

function HideOff()
	hidestatus = "OFF"
	
	if my_window ~= nil then
		ReDrawWindow()
	end
end

function HideOn()
	hidestatus = "ON"
	
	if my_window ~= nil then
		ReDrawWindow()
	end
end

function AuraWornCheck(name, line, wc)
	aname = string.lower(wc[1])
	
	if aname == sancname then
		sancstatus = "ON"
	end
	
	if my_window ~= nil then
		ReDrawWindow()
	end
end

function AuraRemovedCheck(name, line, wc)
	aname = string.lower(wc[1])
	
	if aname == sancname then
		CheckStatus()
	end
end
	
function InvisRemovedCheck(name, line, wc)
	iname = string.lower(wc[1])
	if iname == invisname then
		CheckStatus()
	end
end

function InvisWornCheck(name, line, wc)
	iname = string.lower(wc[1])
	
	if iname == invisname then
		invisstatus = "ON"
	end
	
	if my_window ~= nil then
		ReDrawWindow()
	end
end
	
-- Learned Functions

function SpellListOnLearned()
	world.EnableGroup ("SpellListLearned", 1)
	world.EnableGroup ("RecoveryList", 1)

	invislearned = "no"
	sneaklearned = "no"
	shadowlearned = "no"
	sanclearned = "no"
	chamlearned = "no"
	hidelearned = "no"
	
	SendNoEcho ("slist learned")
end
 
function SpellListOffLearned()
	world.EnableGroup ("SpellListLearned", 0)
	
	if learnedcheck == "yes" then
		learnedcheck = "no"
		
		ColourNote(msg_colour, "", "Skills/spells Learned list has been updated.")
	end

	CheckStatus()
end

function RecoveryListOff()
	world.EnableGroup ("RecoveryList", 0)
end
 
function GrabSpellLearned(name, line, wc)
	spellname = wc[2]
	spellpercentage = tonumber(wc[5])
	
	if spellname == "invis" then 
		if spellpercentage ~= 1 then
			invislearned = "yes"
		end
	elseif spellname == "sneak" then
		if spellpercentage ~= 1 then
			sneaklearned = "yes"
		end
	elseif spellname == "shadow form" then
		if spellpercentage ~= 1 then
			shadowlearned = "yes"
		end	
	elseif spellname == "chameleon power" then
		if spellpercentage ~= 1 then
			chamlearned = "yes"
		end
	elseif spellname == "hide" then
		if spellpercentage ~= 1 then
			hidelearned = "yes"
		end
	elseif spellname == "sanctuary" then
		if spellpercentage ~= 1 then
			sanclearned = "yes"
		end
	end
end

--------------------------------------------
------------- WINDOW FUNCTIONS -------------
--------------------------------------------
function CreateWindow()

-- my_window = ThemedTextWindow(
   -- id,                    -- string, required, a unique identifier for this window
   -- default_left_position, -- integer, required, where to put it if the player hasn't moved it
   -- default_top_position,  -- integer, required, where to put it if the player hasn't moved it
   -- default_width,         -- integer, required, how big to make it if the player hasn't moved it
   -- default_height,        -- integer, required, how big to make it if the player hasn't moved it
   -- title,                 -- string, optional (nil means no titlebar), text to put into the title
   -- title_alignment,       -- string, optional (default is "center"), "left", "center", or "right"
   -- is_temporary,          -- boolean, optional (default is false), true adds a close button in the top left
   -- resizeable,            -- boolean, optional (default is false), make the window resizeable
   -- text_scrollable,       -- boolean, optional (default is false), add a scrollbar and mousewheel scrolling
   -- text_selectable,       -- boolean, optional (default is false), make the text selectable
   -- text_copyable,         -- boolean, optional (default is false), make the text copyable via right-click
   -- url_hyperlinks,        -- boolean, optional (default is false), turn detected URLs into clickable links
   -- autowrap,              -- boolean, optional (default is false), automatically wrap text lines that are too wide
   -- title_font_name,       -- string, optional (default is Dina), override the title font name
   -- title_font_size,       -- integer, optional (default is 10), override the title font size
   -- text_font_name,        -- string, optional (default is Dina), override the body text font name
   -- text_font_size,        -- integer, optional (default is 10), override the body text font size
   -- text_max_lines,        -- integer, optional (default is 1000), maximum number of text lines to keep
   -- text_padding,          -- integer, optional (default is 5 pixels), space between text and miniwindow frame
   -- defer_showing          -- boolean, optional (default is false), true will prevent the window from appearing until you call :show() on it
-- )

	my_window = ThemedTextWindow("OmphalonWindow", 1, 200, 170, 65, nil, "center", false, false, false, true, false, false, false, "dina", 10, "dina", 8)
	
	ReDrawWindow()
end

function DeleteWindow()
	my_window:delete()
end

function ToggleWindow()
	if windowopen == 1 then
		windowopen = 2
		HideWindow()
	elseif windowopen == 2 then
		windowopen = 1
		ShowWindow()
	end
end

function ShowWindow()
	ReDrawWindow()
	my_window:show()
end

function HideWindow()
	my_window:hide()
end

function ReDrawWindow()
	my_window:clear()
	winheight = my_window.default_height
	
	if sancstatus == nil or sancstatus == "N/A" then
		if sanclearned ~= "yes" and sancname ~= "N/A" then
			sancstatus = "N/A"
		else
			sancstatus = "NO"
		end
	end
	
	if invisstatus == nil or invisstatus == "N/A" then
		if invislearned ~= "yes" and invisname ~= "N/A" then
			invisstatus = "N/A"
		else
			invisstatus = "NO"
		end
	end
	
	if hidestatus == nil or hidestatus == "N/A" then
		if hidelearned ~= "yes" and chamlearned ~= "yes" then
			hidestatus = "N/A"
		else
			hidestatus = "NO"
		end
	end
	
	if sneakstatus == nil or sneakstatus == "N/A" then
		if sneaklearned ~= "yes" and shadowlearned ~= "yes" then
			sneakstatus = "N/A"
		else
			sneakstatus = "NO"
		end
	end

	if sancdisplay == "yes" then
		if sancstatus == "ON" then
			my_window:add_text("@WSanctuary:    @G" .. sancstatus)
		elseif sancstatus == "N/A" then
			my_window:add_text("@WSanctuary:    @Y" .. sancstatus)
		else
			my_window:add_text("@WSanctuary:    @R" .. sancstatus)
		end
	else
		-- winheight = winheight - 16
		-- my_window:resize(170, winheight)
	end
	
	if invisdisplay == "yes" then
		if invisstatus == "ON" then
			my_window:add_text("@WInvis:        @G" .. invisstatus)
		elseif invisstatus == "N/A" then
			my_window:add_text("@WInvis:        @Y" .. invisstatus)
		else
			my_window:add_text("@WInvis:        @R" .. invisstatus)
		end
	end
	
	if hidedisplay == "yes" then
		if hidestatus == "ON" then
			my_window:add_text("@WHidden:       @G" .. hidestatus)
		elseif hidestatus == "N/A" then
			my_window:add_text("@WHidden:       @Y" .. hidestatus)
		else
			my_window:add_text("@WHidden:       @R" .. hidestatus)
		end
	end
	
	if sneakdisplay == "yes" then
		if sneakstatus == "ON" then
			my_window:add_text("@WSneak/Shadow: @G" .. sneakstatus)
		elseif sneakstatus == "N/A" then
			my_window:add_text("@WSneak/Shadow: @Y" .. sneakstatus)
		else
			my_window:add_text("@WSneak/Shadow: @R" .. sneakstatus)
		end
	end
end

---------------------------------------------
--------------- HELP FUNCTION ---------------
---------------------------------------------
function TowHelp()	
	local title = "Tallimos' Omphalon's Window v" .. PLUGIN_VERSION .. " Help"
	local title2 = noteline
	
	spacing = HelpSpacing(title, title2)
	
	ColourNote(help_colour, "", spacing, help_command_colour, "", title)

	ColourNote(help_colour, "", noteline)
	
	ColourNote(help_colour, "", "Gives ongoing status of a few skills and spells. Displayed via a window.")

	ColourNote(help_colour, "", noteline)
	
	ColourNote(help_command_colour, "", "tow (on|off)              ", help_colour, "", " - turns Omphalon's Window on and off")
	
	ColourNote(help_command_colour, "", "tow affected              ", help_colour, "", " - check to see if the monitored skill/spells are currently on")
	
	ColourNote(help_command_colour, "", "tow learned               ", help_colour, "", " - updates which of the skills and spells are learned and then updates their")
	ColourNote(help_colour, "", "                             status")
	
	ColourNote(help_command_colour, "", "tow sanc add <aura name>  ", help_colour, "", " - adds the Sanctuary Aura name, needed to be able to update window if aura")
	ColourNote(help_colour, "", "                             is worn or removed")
	
	ColourNote(help_command_colour, "", "tow sanc remove           ", help_colour, "", " - removes the Sanctuary Aura name")
	
	ColourNote(help_command_colour, "", "tow sanc                  ", help_colour, "", " - displays what is currently set for the Sanctuary Aura name")
	
	ColourNote(help_command_colour, "", "tow invis add <invis name>", help_colour, "", " - adds the Invis Ring name, needed to be able to update window if invis ring")
	ColourNote(help_colour, "", "                             is worn or removed")
	
	ColourNote(help_command_colour, "", "tow invis remove          ", help_colour, "", " - removes the Invis Ring name")
	
	ColourNote(help_command_colour, "", "tow invis                 ", help_colour, "", " - displays what is currently set for the Invis Ring name")
	
	ColourNote(help_command_colour, "", "tow <sanc|invis|hide|sneak> <on|off>", help_colour, "", " - turns the display for the particular status on and off.")
	ColourNote(help_colour, "", "                                     - user can leave out on/off to toggle display")
	
	ColourNote(help_colour, "", noteline)
	
	Note("")
end	-- LinkHelp

function HelpSpacing(title, title2)
	local leng = tonumber(string.len(title))
	local leng2 = tonumber(string.len(title2))
	
	local spacing = 0
	local lendif = 0
	
	if leng > leng2 then
	else
		lendif = leng2 - leng
		lendif = lendif * 0.5
	end

	spacing = string.rep(" ", lendif)
	
	return spacing
end -- HelpSpacing

function ClearWindow()
	if my_window ~= nil then
		DeleteWindow()
	end
end

function Connected()
	ran = true
	
	SpellListOnLearned()
end -- Connected

function OnPluginEnable()
	ClearWindow()
	
	GetSavedData()
	
	CreateWindow()
	
	if IsConnected() then
		if not ran then Connected() end
	end
end -- OnPluginEnable

function OnPluginInstall ()
	ClearWindow()
	
	PLUGIN_VERSION  = GetPluginInfo(GetPluginID(), 19)
	PLUGIN_NAME   = GetPluginInfo(GetPluginID(), 1)

	ColourNote(help_colour, "", "Thank you for installing ", qty_colour, "", "Tallimos' Omphalon's Window v" ..  PLUGIN_VERSION, help_colour, "", ". Please see ", help_command_colour, "", "tow help", help_colour, "", " for more information.")
	
	Note("")

	GetSavedData()
	
	CreateWindow()

	if IsConnected() then
		if not ran then Connected() end
	end
end

function OnPluginDisconnect ()
	ClearWindow()
end -- function

function OnPluginClose ()
	ClearWindow()
end -- function

function OnPluginDisable ()
	ClearWindow()
end -- function

function OnPluginSaveState ()
	SetVariable ("invisname", "invisname = " .. serialize.save_simple (invisname))
	SetVariable ("sancname", "sancname = " .. serialize.save_simple (sancname))
	SetVariable ("sancdisplay", "sancdisplay = " .. serialize.save_simple (sancdisplay))
	SetVariable ("invisdisplay", "invisdisplay = " .. serialize.save_simple (invisdisplay))
	SetVariable ("hidedisplay", "hidedisplay = " .. serialize.save_simple (hidedisplay))
	SetVariable ("sneakdisplay", "sneakdisplay = " .. serialize.save_simple (sneakdisplay))
	
	SetVariable ("pastfirstinstall", "true")
end -- OnPluginSaveState

function GetSavedData()
	if GetVariable ("pastfirstinstall") == "true" then
		assert (loadstring (GetVariable ("invisname") or "")) ()
		assert (loadstring (GetVariable ("sancname") or "")) ()
		assert (loadstring (GetVariable ("sancdisplay") or "")) ()
		assert (loadstring (GetVariable ("invisdisplay") or "")) ()
		assert (loadstring (GetVariable ("hidedisplay") or "")) ()
		assert (loadstring (GetVariable ("sneakdisplay") or "")) ()
	else
		invisname = "N/A"
		sancname = "N/A"
		sancdisplay = "yes"
		invisdisplay = "yes"
		hidedisplay = "yes"
		sneakdisplay = "yes"
	end
	
	SaveState()
end

]]>
</script>
</muclient>
