<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Tuesday, October 12, 2021, 1:40 PM -->
<!-- MuClient version 5.07-pre -->

<!-- Plugin "Tallimos_Link" generated by Plugin Wizard -->

<muclient>
<plugin
   name="Tallimos_Link"
   author="Tallimos"
   id="b6e1db7da89f86521f2c238e"
   language="Lua"
   purpose="Gives members of baal clan an easier way to keep track of link clanskill"
   save_state="y"
   date_written="2021-10-12 13:40:05"
   requires="4.37"
   version="1.0"
   >

</plugin>


<!--  Get our standard constants -->

<include name="constants.lua"/>

<!--  Triggers  -->

<triggers>
	<trigger
		script="align_lock"
		group="ClanTrigs"
		match="^Your vision darkens as a blizzard of Saa flicker across your eyes.$"
		name="AlignLockOn"
		enabled="y"
		sequence="100"
		regexp="y"
		>
	</trigger>
	<trigger
		script="align_fail"
		group="ClanTrigs"
		match="You failed to link to Shai'tan."
		name="AlignLockFail"
		enabled="y"
		sequence="100"
		regexp="y"
		>
	</trigger>
	<trigger
		script="align_off"
		enabled="y"
		group="ClanTrigs"
		match="You are no longer linked to Shai'tan."
		name="AlignLockOff"
		sequence="100"
		>
	</trigger>
	<trigger
		script="align_already"
		group="ClanTrigs"
		match="^You are already linked to Shai'tan.$"
		name="AlignLockAlready"
		enabled="y"
		sequence="100"
		regexp="y"
		>
	</trigger>	
	<trigger
		group="SpellListAffected"
		match="^\{spellheaders affected\}$"
		omit_from_output="y"
		regexp="y"
		sequence="100"
		>
	</trigger>
	<trigger
		group="SpellListAffected"
		match="^\{\/spellheaders\}$"
		omit_from_output="y"
		regexp="y"
		sequence="100"
		>
	</trigger>
	<trigger
		group="SpellListAffected"
		match="^\{recoveries affected\}$"
		omit_from_output="y"
		regexp="y"
		sequence="100"
		>
	</trigger>
	<trigger
		group="SpellListAffected"
		script="SpellListOffAffected"
		match="^\{\/recoveries\}$"
		omit_from_output="y"
		regexp="y"
		sequence="100"
		>
	</trigger>
	<trigger
		script="GrabSpellAffected"
		group="SpellListAffected"
		match="^(\d+)\,(.*?)\,(\d+)\,(\d+)\,(\d+)\,-?(\d+)\,(\d+)$"
		omit_from_output="y"
		regexp="y"
		sequence="100"
		>
	</trigger>
	<trigger
		group="SpellListAffected"
		match="^(\d+)\,(.*?),(\d+)$"
		omit_from_output="y"
		regexp="y"
		sequence="105"
		>
	</trigger>
</triggers>

<!--  Timers  -->

<timers>
<timer name="align_lock_timer" 
    second="1"  
    enabled="n"
	script="align_lock_timer"
	>
	</timer>
</timers>

<!--  Aliases  -->

<aliases>
	<alias
		match="^link$"
		script="StartLink"
		enabled="y"
		regexp="y"
		ignore_case="y"
		sequence="100"
		>
	</alias>
	<alias
		script="CommandMenu"
		match="^(?:link) (.*?)$"
		enabled="y"
		ignore_case="y"
		regexp="y"
		sequence="105"
		>
	</alias>
	<alias
		script="AlignLockReset"
		match="^alignreset$"
		enabled="y"
		expand_variables="y"
		regexp="y"
		sequence="100"
		>
	</alias>
	<alias
		script="ToggleWindow"
		match="^(linkwindow|tlw)$"
		name="WindowToggle"
		ignore_case="y"
		regexp="y"
		sequence="400"
		enabled="n"
		>
	</alias>
</aliases>

<!--  Script  -->

<script>
<![CDATA[
require "serialize"
require "commas"
require "gmcphelper"
require "themed_miniwindows"

local msg_colour      = "lightslategrey"
local err_colour      = "firebrick"
local help_colour     = "lightslategrey"
local qty_colour      = "cyan"
local optional_colour = "lightcoral"
local command_colour  = "white"
local cmd_required    = "royalblue"
local help_command_colour  = "red"

local noteline = "=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-="

ran = false

function CommandMenu(name, line, wc)
	commandline = trim(string.lower(wc[1]))
	wordtable = utils.split (commandline, " ")

	cmd = wordtable[1]
	
	if cmd == "check" or cmd == "reset" then
		ColourNote(msg_colour, "", "Checking status of align lock.")
		
		alignresetcheck = "yes"
		
		AlignLockReset()
	elseif cmd == "display" then
		dtype = wordtable[2]

		if dtype ~= nil then
			if dtype == "title" then
				distype = "title"
				
				if atime == nil then
					SetTitle ("Aardwolf - ALIGN LOCK STATUS: UNKNOWN")
				else
					SetTitle ("Aardwolf - ALIGN LOCK STATUS: ON - " .. atime .. " remaining")
				end
				
				SetStatus ("")
				
				ColourNote(msg_colour, "", "Link status will now appear in the ", qty_colour, "", "TITLE BAR", msg_colour, "", ".")
				
				if my_window ~= nil then
					DeleteWindow()
				end
			elseif dtype == "window" then
				distype = "window"
				
				SetTitle ("Aardwolf")
				SetStatus ("")
				
				ColourNote(msg_colour, "", "Link status will now appear in a ", qty_colour, "", "WINDOW", msg_colour, "", ".")
				
				CreateWindow()
			elseif dtype == "status" then
				distype = "status"
				
				SetTitle ("Aardwolf")
				
				if atime == nil then
					SetStatus ("ALIGN LOCK STATUS: UNKNOWN")
				else
					SetStatus ("ALIGN LOCK STATUS: ON - " .. atime .. " remaining")
				end
				
				ColourNote(msg_colour, "", "Link status will now appear in the ", qty_colour, "", "STATUS BAR", msg_colour, "", ".")
				
				if my_window ~= nil then
					DeleteWindow()
				end
			else
				ColourNote(msg_colour, "", "Invalid option, please see ", qty_colour, "", "link help", msg_colour, "", " for more information.")
			end
		else
			if distype == "title" then
				distype = "status"
				
				SetTitle ("Aardwolf")
				
				if atime == nil then
					SetStatus ("ALIGN LOCK STATUS: UNKNOWN")
				else
					SetStatus ("ALIGN LOCK STATUS: ON - " .. atime .. " remaining")
				end
				
				ColourNote(msg_colour, "", "Link status will now appear in the ", qty_colour, "", "STATUS BAR", msg_colour, "", ".")
				
				if my_window ~= nil then
					DeleteWindow()
				end
			elseif distype == "status" then
				distype = "window"

				SetTitle ("Aardwolf")
				SetStatus ("")
				
				ColourNote(msg_colour, "", "Link status will now appear in a ", qty_colour, "", "WINDOW", msg_colour, "", ".")
				
				CreateWindow()
			elseif distype == "window" then
				distype = "title"
				
				if atime == nil then
					SetTitle ("Aardwolf - ALIGN LOCK STATUS: UNKNOWN")
				else
					SetTitle ("Aardwolf - ALIGN LOCK STATUS: ON - " .. atime .. " remaining")
				end
				
				SetStatus ("")
				
				ColourNote(msg_colour, "", "Link status will now appear in the ", qty_colour, "", "TITLE BAR", msg_colour, "", ".")
				
				if my_window ~= nil then
					DeleteWindow()
				end
			end
		end
	elseif cmd == "window" then
		attrib = wordtable[2]

		if attrib == "on" then
			if distype == "window" then
				CreateWindow()
			
				ColourNote(msg_colour, "", "Align Lock status window been initialized.")
			else
				ColourNote(msg_colour, "", "Display type is not currently set to ", qty_colour, "", "WINDOW")
			end
		elseif attrib == "off" then
			if distype == "window" then
				if my_window ~= nil then
					DeleteWindow()
				end

				ColourNote(msg_colour, "", "Align Lock Status window has been deactivated.")
			else
				ColourNote(msg_colour, "", "Display type is not currently set to ", qty_colour, "", "WINDOW")
			end
		else
			ColourNote(msg_colour, "", "Invalid option, please see ", qty_colour, "", "link help", msg_colour, "", " for more information.")
		end
	elseif cmd == "auto" then
		attrib = wordtable[2]
		
		if attrib == "on" then
			if autocast == "yes" then
				ColourNote(msg_colour, "", "Align Lock auto recasting has already been turned ", qty_colour, "", "ON")
				
				return
			end
			
			autocast = "yes"
			
			ColourNote(msg_colour, "", "Align Lock auto recasting has been turned ", qty_colour, "", "ON", msg_colour, "", ". Recasting currently set to ", qty_colour, "", string.upper(autocasttype), msg_colour, "", ".")
			
			Execute("alignreset")
		elseif attrib == "off" then
			if autocast == "no" then
				ColourNote(msg_colour, "", "Align Lock auto recasting has already been turned ", qty_colour, "", "OFF")
				
				return
			end
			
			autocast = "no"
			
			ColourNote(msg_colour, "", "Align Lock auto recasting has been turned ", qty_colour, "", "OFF", msg_colour, "", ".")
		elseif attrib == "all" then
			autocasttype = "all"
			
			ColourNote(msg_colour, "", "Align Lock auto recasting has been set to ", qty_colour, "", "ALL", msg_colour, "", ".")
		elseif attrib == "align" then
			if wordtable[3] == nil then 
				autocasttype = "align"
				
				autocastalignmin = 9999
				autocastalignmax = 9999
					
				ColourNote(msg_colour, "", "Align Lock auto recasting has been set to ", qty_colour, "", "ALIGN", msg_colour, "", ". Please use ", qty_colour, "", "link auto align <min> <max>", msg_colour, "", " to set the min and max alignments.")
			else
				if tonumber(wordtable[3]) ~= nil and tonumber(wordtable[4]) ~= nil then
					autocastalignmin = tonumber(wordtable[3])
					autocastalignmax = tonumber(wordtable[4])
					
					ColourNote(msg_colour, "", "Min and Max alignments have been set to ", qty_colour, "", autocastalignmin, msg_colour, "", " and ", qty_colour, "", autocastalignmax, msg_colour, "", ".")
				else
					ColourNote(msg_colour, "", "Min and max need to be numbers.")
				end
			end
		else
			ColourNote(msg_colour, "", "Invalid option, please see ", qty_colour, "", "link help", msg_colour, "", " for more information.")
		end
	elseif cmd == "help" then
		LinkHelp()
	else
		ColourNote(msg_colour, "", "Invalid option, please see ", qty_colour, "", "link help", msg_colour, "", " for more information.")
	end
	
	SaveState()
end -- CommandMenu
	
function StartLink()
	SendNoEcho("link")

	alignfail = 0	
end

function align_fail()
	SendNoEcho ("link")

	alignfail = alignfail + 1
end

function GetAlign()
	charstatus = gmcp("char.status")
	
	gmcpcharstate = tonumber(charstatus.state)
	gmcpcharalign = tonumber(charstatus.align)
end

function align_off()
	Send_GMCP_Packet("request char")
	
	GetAlign()
	
	SendNoEcho ("echo @RAlign Lock has dropped@w")

	alignoff = "yes"
	
	if autocast == "yes" then
		if gmcpcharstate == 3 then
			if autocasttype == "all" then
				alignfail = 0
				
				SendNoEcho ("link")
			elseif autocasttype == "align" then
				if gmcpcharalign >= autocastalignmin and gmcpcharalign <= autocastalignmax then
					alignfail = 0

					SendNoEcho ("link")
				end
			end
		else 
			CastLink = "yes"
		end
	else		
		if distype == "title" then
			SetTitle ("Aardwolf - ALIGN LOCK STATUS: OFF")
			SetStatus ("")
		elseif distype == "status" then	
			SetTitle ("Aardwolf")
			SetStatus ("ALIGN LOCK STATUS: OFF")
		elseif distype == "window" then
			SetTitle ("Aardwolf")
			SetStatus ("")
			
			if my_window == nil then
				CreateWindow()
			else
				ReDrawWindow()
			end
		end		

		check (EnableTimer ("align_lock_timer", 0))
		check (ResetTimer ("align_lock_timer"))
	end
end

function SpellListOnAffected()
	world.EnableGroup ("SpellListAffected", 1)

	linkdur = 0
	alignoff = "yes"
	
	SendNoEcho ("slist affected")
end
 
function SpellListOffAffected()
	world.EnableGroup ("SpellListAffected", 0)
	
	if linkdur == 0 then
		check (EnableTimer ("align_lock_timer", 0))
		alignoff = "yes"
		
		if distype == "title" then
			SetTitle ("Aardwolf - ALIGN LOCK STATUS: OFF")
			SetStatus ("")
		elseif distype == "status" then	
			SetTitle ("Aardwolf")
			SetStatus ("ALIGN LOCK STATUS: OFF")
		elseif distype == "window" then
			SetTitle ("Aardwolf")
			SetStatus ("")
			ReDrawWindow()
		end

		if autocast == "yes" then
			if gmcpcharstate == 3 then
				if autocasttype == "all" then
					alignfail = 0
					
					SendNoEcho ("link")
				elseif autocasttype == "align" then
					if gmcpcharalign >= autocastalignmin and gmcpcharalign <= autocastalignmax then
						alignfail = 0

						SendNoEcho ("link")
					else
						CastLink = "yes"
					end
				end
			else 
				CastLink = "yes"
			end
		end
	else
		check (EnableTimer ("align_lock_timer", 1))
		check (ResetTimer ("align_lock_timer"))
	end
	
	if alignresetcheck == "yes" then
		alignresetcheck = "no"
		
		if linkdur == 0 then
			ColourNote(msg_colour, "", "ALIGN LOCK STATUS: ", qty_colour, "", "OFF", msg_colour, "", ".")
		else
			ColourNote(msg_colour, "", "ALIGN LOCK STATUS: ", qty_colour, "", "ON", msg_colour, "", " - ", qty_colour, "", atime, msg_colour, "", " remaining.")
		end
	end
end

function GrabSpellAffected(name, line, wc)
	spellname = wc[2]
	duration = tonumber(wc[4])
	
	if spellname == "link" then 
		linkdur = duration
		alignoff = "no"
	end
end

function align_lock(name, line, wc)
	SpellListOnAffected()
	
	check (EnableTimer ("align_lock_timer", 1))
	check (ResetTimer ("align_lock_timer"))
	
	SendNoEcho ("echo @DAlign Lock attempt fails: @R" .. alignfail)
	
	alignfail = 0
end

function align_already(name, line, wc)
	SpellListOnAffected()
	
	check (EnableTimer ("align_lock_timer", 1))
	check (ResetTimer ("align_lock_timer"))
end

function AlignLockReset()
	SpellListOnAffected()
end

function align_lock_timer()
	atime = ""
	
	linkdur = linkdur - 1
	
	local alignmin = math.floor(linkdur / 60)
	local alignsec = linkdur - (alignmin * 60)
	
	if alignmin > 1 then
		if alignsec > 1 then
			atime = alignmin .. " mins " .. alignsec .. " secs"
		elseif alignsec == 1 then
			atime = alignmin .. " mins " .. alignsec .. " sec"
		else
			atime = alignmin .. " mins "
		end
	elseif alignmin == 1 then
		if alignsec > 1 then
			atime = alignmin .. " min " .. alignsec .. " secs"
		elseif alignsec == 1 then
			atime = alignmin .. " min " .. alignsec .. " sec"
		else
			atime = alignmin .. " min "
		end
	else
		if alignsec > 1 then
			atime = alignsec .. " secs"
		elseif alignsec == 1 then
			atime = alignsec .. " sec"
		end
	end

	if linkdur == 0 then
		check (EnableTimer ("align_lock_timer", 0))
		alignoff = "yes"
		
		if distype == "title" then
			SetTitle ("Aardwolf - ALIGN LOCK STATUS: OFF")
			SetStatus ("")
		elseif distype == "status" then	
			SetTitle ("Aardwolf")
			SetStatus ("ALIGN LOCK STATUS: OFF")
		elseif distype == "window" then
			SetTitle ("Aardwolf")
			SetStatus ("")
			ReDrawWindow()
		end
	else
		if linkdur == 31 then 
			Execute ("alignreset")
			
			return
		elseif linkdur == 30 then
			SendNoEcho ("echo @RWARNING @DALIGN LOCK DROPS in roughly 30 seconds.@w")
		elseif linkdur == 15 then
			SendNoEcho ("echo @RWARNING @DALIGN LOCK DROPS in roughly 15 seconds.@w")
		elseif linkdur == 5 then
			SendNoEcho ("echo @RWARNING @DALIGN LOCK DROPS in roughly 5 seconds.@w")		
		end
	
		if distype == "title" then
			SetTitle ("Aardwolf - ALIGN LOCK STATUS: ON - " .. atime .. " remaining")
			SetStatus ("")
		elseif distype == "status" then
			SetTitle ("Aardwolf")
			SetStatus ("ALIGN LOCK STATUS: ON - " .. atime .. " remaining")
		elseif distype == "window" then
			SetTitle ("Aardwolf")
			SetStatus ("")
			
			if my_window == nil then
				CreateWindow()
			else
				ReDrawWindow()
			end
		end
	end
end -- align_lock_timer

---------------------------------------------------
----------- AFK AWAY TIME NOTE FUNCTION -----------
---------------------------------------------------
function aligntime(time)
	local away_time = ""

	if time["year"] ~= nil then
		if tonumber(time["year"]) == 1 then
			away_time = time["year"] .. " year "
		elseif tonumber(time["year"]) ~= 0 then
			away_time = time["year"] .. " years "
		end
	end

	if time["month"] ~= nil then
		if tonumber(time["month"]) == 1 then
			away_time = away_time .. time["month"] .. " month "
		elseif tonumber(time["month"]) ~= 0 then
			away_time = away_time .. time["month"] .. " months "
		end
	end
	
	if time["day"] ~= nil then
		if tonumber(time["day"]) == 1 then
			away_time = away_time .. time["day"] .. " day "
		elseif tonumber(time["day"]) ~= 0 then
			away_time = away_time .. time["day"] .. " days "
		end
	end
	
	if time["hour"] ~= nil then
		if tonumber(time["hour"]) == 1 then
			away_time = away_time .. time["hour"] .. " hour "
		elseif tonumber(time["hour"]) ~= 0 then
			away_time = away_time .. time["hour"] .. " hours "
		end
	end

	if time["min"] ~= nil then
		if tonumber(time["min"]) == 1 then
			away_time = away_time .. time["min"] .. " min "
		elseif tonumber(time["min"]) ~= 0 then
			away_time = away_time .. time["min"] .. " mins "
		end
	end

	if time["sec"] ~= nil then
		if tonumber(time["sec"]) == 1 then
			away_time = away_time .. time["sec"] .. " sec"
		elseif tonumber(time["sec"]) ~= 0 then
			away_time = away_time .. time["sec"] .. " secs"
		end
	end

    return(away_time)
end -- aligntime

function ClearStatus()	
	check (EnableTimer ("align_lock_timer", 0))

	if distype == "title" then
		SetTitle ("Aardwolf")
	elseif distype == "status" then
		SetStatus ("")
	elseif distype == "window" then
		atime = nil
		
		ReDrawWindow()
	end	
end

function CheckAlignRange()
	checkalignrange = "checked"
	Execute("alignreset")
end

--------------------------------------------
------------- WINDOW FUNCTIONS -------------
--------------------------------------------
function CreateWindow()
	my_window = ThemedTextWindow("alignwindow", 1, 200, 300, 28, nil, "center", false, false, false)

	ReDrawWindow()

	-- EnableAlias ("WindowToggle", true)
end

function DeleteWindow()
	my_window:delete()

	-- EnableAlias ("WindowToggle", false)
end

function ToggleWindow()
	if windowopen == 1 then
		windowopen = 2
		HideWindow()
	elseif windowopen == 2 then
		windowopen = 1
		ShowWindow()
	end
end

function ShowWindow()
	ReDrawWindow()
	my_window:show()
end

function HideWindow()
	my_window:hide()
end

function ReDrawWindow()
	my_window:clear()
	
	if alignoff == "yes" then 
		linkstatus = "OFF"
	elseif atime == nil then
		linkstatus = "UNKNOWN"
	else
		linkstatus = atime
	end
	
	my_window:add_text("@DAlign Lock Status: @R" .. linkstatus)
end

---------------------------------------------
--------------- HELP FUNCTION ---------------
---------------------------------------------
function LinkHelp()	
	local title = "Tallimos' Link Script v" .. PLUGIN_VERSION .. " Help"
	local title2 = noteline
	
	spacing = HelpSpacing(title, title2)
	
	ColourNote(help_colour, "", spacing, help_command_colour, "", title)

	ColourNote(help_colour, "", noteline)
	
	ColourNote(help_colour, "", "Gives members of Ba'al an easy way of displaying align lock status. As well as the option to recast")
	ColourNote(help_colour, "", "when it drops.")

	ColourNote(help_colour, "", noteline)
	
	ColourNote(help_command_colour, "", "link                ", help_colour, "", " - cast align lock")
	
	ColourNote(help_command_colour, "", "link check          ", help_colour, "", " - checks current status of align lock, useful if current status is being displayed")
	ColourNote(help_colour, "", "                       as unknown")
	
	ColourNote(help_command_colour, "", "link window (on|off)", help_colour, "", " - turns the align lock status window on and off")
	
	ColourNote(help_command_colour, "", "link display        ", help_colour, "", " - toggled where to display align lock status")
	ColourNote(help_colour, "", "                     - default is set to ", help_command_colour, "", "title")
	
	ColourNote(help_command_colour, "", "link display (title|window|status)", help_colour, "", " - directly sets where to display align lock status")
	
	ColourNote(help_command_colour, "", "link auto (on|off)   ", help_colour, "", " - turns the auto recasting of align lock on or off")
	ColourNote(help_colour, "", "                      - by default auto recast is ", help_command_colour, "", "off", help_colour, "", " and set to ", help_command_colour, "", "all")
	
	ColourNote(help_command_colour, "", "link auto (align|all)", help_colour, "", " - sets when to autocast lign lock")
	ColourNote(help_colour, "", "                      - ", help_command_colour, "", "align", help_colour, "", " allows you to set autocasting of align lock to a specific alignment")
	ColourNote(help_colour, "", "                      - ", help_command_colour, "", "all", help_colour, "", " allows you to autocast align lock whenever it drops")
	
	ColourNote(help_command_colour, "", "link auto align <min align> <max align>", help_colour, "", " - sets the alignment range for the align lock auto recasting")
	
	ColourNote(help_colour, "", noteline)
	
	Note("")
end	-- LinkHelp

function HelpSpacing(title, title2)
	local leng = tonumber(string.len(title))
	local leng2 = tonumber(string.len(title2))
	
	local spacing = 0
	local lendif = 0
	
	if leng > leng2 then
	else
		lendif = leng2 - leng
		lendif = lendif * 0.5
	end

	spacing = string.rep(" ", lendif)
	
	return spacing
end -- HelpSpacing

--=================================================================================
-- Called when plugin receives telnet data - main entry point for actually running
-- the plugin.
--=================================================================================
function OnPluginBroadcast (msg, id, name, text)

   -- Look for GMCP handler.
   if (id == '3e7dedbe37e44942dd46d264') then	
		if (text == "char.status") then -- the GMCP Handler plugin says "I got a new char.status!"
			charstatus = gmcp("char.status")
	
			gmcpcharstate = tonumber(charstatus.state)
			gmcpcharalign = tonumber(charstatus.align)
			
			if CastLink == "yes" then
				if autocasttype == "all" then
					if gmcpcharstate == 3 then
						CastLink = "no"
					
						alignfail = 0
					
						SendNoEcho ("link")
					end
				elseif autocasttype == "align" then
					if gmcpcharalign >= autocastalignmin and gmcpcharalign <= autocastalignmax then
						if gmcpcharstate == 3 then
							CastLink = "no"
					
							alignfail = 0
					
							SendNoEcho ("link")
						end
					end					
				end
			end
		end	
	end
end

function GetSavedData()
	if GetVariable ("pastfirstinstall") == "true" then
		assert (loadstring (GetVariable ("distype") or "")) ()
		assert (loadstring (GetVariable ("autocast") or "")) ()
		assert (loadstring (GetVariable ("autocasttype") or "")) ()
		assert (loadstring (GetVariable ("autocastalignmin") or "")) ()
		assert (loadstring (GetVariable ("autocastalignmax") or "")) ()
		
	else
		distype = "title"
		autocast = "no"
		autocasttype = "all"
		autocastalignmin = 9999
		autocastalignmax = 9999
	end
	
	if distype == "window" then
		windowopen = 1
		
		SetTitle ("Aardwolf")
		SetStatus ("")
		
		CreateWindow()
	elseif distype == "title" then
		SetTitle ("Aardwolf - ALIGN LOCK STATUS: UNKNOWN")
		SetStatus ("")
		windowopen = 2
		
		if my_window ~= nil then
			DeleteWindow()
		end
	elseif distype == "status" then
		SetTitle ("Aardwolf")
		SetStatus ("ALIGN LOCK STATUS: UNKNOWN")
		windowopen = 2
		
		if my_window ~= nil then
			DeleteWindow()
		end
	end
	
	SaveState()
end

function OnPluginEnable()
	GetSavedData()
	
	if IsConnected() then
		if not ran then Connected() end
	end
end -- OnPluginEnable

function OnPluginSaveState ()
	SetVariable ("distype", "distype = " .. serialize.save_simple (distype))
	SetVariable ("autocast", "autocast = " .. serialize.save_simple (autocast))
	SetVariable ("autocasttype", "autocasttype = " .. serialize.save_simple (autocasttype))
	SetVariable ("autocastalignmin", "autocastalignmin = " .. serialize.save_simple (autocastalignmin))
	SetVariable ("autocastalignmax", "autocastalignmax = " .. serialize.save_simple (autocastalignmax))
	
	SetVariable ("pastfirstinstall", "true")
end -- OnPluginSaveState

function OnPluginInstall ()
	PLUGIN_VERSION  = GetPluginInfo(GetPluginID(), 19)
	PLUGIN_NAME   = GetPluginInfo(GetPluginID(), 1)

	GetSavedData()

	ColourNote(help_colour, "", "Thank you for installing ", qty_colour, "", "Tallimos' Link v" ..  PLUGIN_VERSION, help_colour, "", ". Please see ", help_command_colour, "", "link help", help_colour, "", " for more information.")
	Note("")
	
	if IsConnected() then
		if not ran then Connected() end
	end
end

function Connected()
	ran = true
	
	Send_GMCP_Packet("request char")

	charstatus = gmcp("char.status")

	gmcpcharstate = tonumber(charstatus.state)
	gmcpcharalign = tonumber(charstatus.align)
	
	if autocast == "yes" then
		Execute("alignreset")
	end
end -- Connected

function OnPluginDisconnect ()
	ran = false
	
	ClearStatus()
end -- function

function OnPluginClose ()
	ClearStatus()
end -- function

function OnPluginDisable ()
	ran = false
	
	ClearStatus()
end -- function

]]>
</script>
</muclient>
