<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Sunday, November 01, 2015, 6:14 PM -->
<!-- MuClient version 4.96 -->

<!-- Plugin "Aarchaeology" generated by Plugin Wizard -->

<muclient>
<plugin
   name="Aarchaeology"
   author="Endymion"
   id="3ae386f3fb52d4eeabdb8e27"
   language="Lua"
   purpose="Aarchaeology helper plugin."
   date_written="2015-11-01 18:09:48"
   requires="4.30"
   version="1.0"
   save_state="y"
   >
<description>
<![CDATA[
-------------------------------------------------------------------------------------------
  Aarchaeology Helper Plugin
-------------------------------------------------------------------------------------------
  This plugin does a few things.  It will show the Pamphlet # when you view
an Aarch piece in your possession.  It will also report your missing and
duplicate Aarch pieces in a report.  You can also set your default bag/bags
that will be looked in when running the report.  Last but not least,
you will see your Need, Piece, or Pamphlet status and also the value of the
piece when viewing an Aarch piece on Auction or Market.

Please see commands below.

aarch help                      Shows this help file.

aarch report                    Looks in your bag and shows what pieces you are missing.
                                 - also works with: arch rep
                                 - Aarch data is *not* saved across reinstall/reload.
								 
aarch bag <id/keyword>          Sets your Aarch bag for running the report.  
                                 - also works with: arch bag <id/keyword>
                                 - For multiple word bag names, please use single quotes.
                                    - e.g. aarch bag 'collection satchel'
                                    - Aarch bag *is* saved across reinstall/reload.
									
aarch bag <multiple bags>       You can now set multiple bags to view during an aarch
                                report.  Separate multiple bags by a comma.
                                 - e.g. aarch bag 1397957507,'collection satchel'
                                 - Aarch bags *are* saved across reinstall/reload.
                                 - vault list should work also, but please don't use
                                   single quotes for vault only.
                                    - e.g. vault list,1397957507,'collection satchel'

aarch sound <on/off>            This turns the Aarch Professor audible alert on/off.

aarch sound <file.wav>          Change the filename of the Aarch Professor alert.
                                 - e.g. aarch sound C:\Windows\Media\notify.wav
-------------------------------------------------------------------------------------------
]]>
</description>
</plugin>


<!--  Get our standard constants -->

<include name="constants.lua"/>

<!--  Triggers  -->

<triggers>
  <trigger
   name="professor"
   enabled="y"
   regexp="y"
   match="^(\(T(ranslucent)?\) ?)?(\(W(hite Aura)?\) )?\s?Andolor's very own \(Aarchaeology\) Professor is here, studying\.$"
   script="play_sound"
   sequence="100"
   omit_from_output="n"
  >
  </trigger>
  <trigger
   enabled="y"
   match="^(\(\s?\d+\)\s?)?\s+?(\(K\)\s?)?(\(M\)|\(Magic\)\s?)?(\(G\)|\(Glow\)\s?)?(\(H\)|\(Hum\)\s?)?\s?\(Aarchaeology\) Collectable Pamphlet \#(\d+) \(1\)$"
   omit_from_output="n"
   regexp="y"
   script="found_pamphlet"
   sequence="100"
  >
  </trigger>
  <trigger
   enabled="y"
   match="^(\(\s?\d+\)\s?)?.*(\(M\)|\(Magic\)\s?)?.+\(Aarchaeology\) ([a-zA-Z\-\' 0-9]+) \(1\)$"
   omit_from_output="y"
   regexp="y"
   script="display_aarch"
   sequence="100"
  >
  </trigger>
  <trigger
   enabled="y"
   match="^Market: (.+ has (proxy )?bid [\d,]+ gold on|Bid of [\d,]+ gold on|.+ is selling) \(Aarchaeology\) (?<piece>.+) \(Level 1, Num \d+\).?( Auction is for Gold\.)?$"
   omit_from_output="y"
   regexp="y"
   script="selling_aarch"
   keep_evaluating="y"
   sequence="100"
  >
  </trigger>
  <trigger
   enabled="y"
   match="^Auction: (.+ has placed a bid for [\d,]+ gold on|.+ is auctioning) \(Aarchaeology\) (?<piece>.+) \(Level 1, Num \d+\).( Current bid is [\d,]+.)?$"
   omit_from_output="y"
   regexp="y"
   script="selling_aarch"
   keep_evaluating="y"
   sequence="100"
  >
  </trigger>
  <trigger
   group="AarchDisable"
   enabled="y"
   match="^\s+(\d+) \(Aarchaeology\) (.+)   1 (\*| )?G.+$"
   omit_from_output="y"
   regexp="y"
   script="lbid_aarch"
   sequence="100"
  >
  </trigger>
  <trigger
   enabled="y"
   match="^([\d ]+) - .+\(Aarchaeology\) (.+)\s+1\s+.+$"
   omit_from_output="y"
   regexp="y"
   script="bid_aarch"
   sequence="100"
  >
  </trigger>
  <trigger
   enabled="n"
   match="^You dream about being able to look\.$"
   omit_from_output="n"
   regexp="y"
   name="cant_look"
   script="cant_look"
   sequence="100"
  >
  </trigger>
  <trigger
   enabled="y"
   match="^Looked in Aarch Bags!$"
   omit_from_output="y"
   regexp="y"
   name="done_look"
   script="done_look"
   sequence="100"
  >
  </trigger>
</triggers>

<!--  Aliases  -->
<aliases>
	<alias
	match="^a?arch repo?r?t?$"
	regexp="y"
	enabled="y"
	sequence="100"
	script="run_report"
	>
	</alias>
	<alias
	match="^a?arch help$"
	regexp="y"
	enabled="y"
	sequence="100"
	script="aarch_help"
	>
	</alias>
	<alias
	match="^a?arch bag ([\w\d\.\', ]+)$"
	regexp="y"
	enabled="y"
	sequence="101"
	script="aarch_bag"
	>
	</alias>
	<alias
	match="^a?arch bag$"
	regexp="y"
	enabled="y"
	sequence="101"
	script="aarch_bag"
	>
	</alias>
	<alias
	match="^a?arch sounds? (on|off)$"
	regexp="y"
	enabled="y"
	sequence="100"
	script="sound"
	>
	</alias>
	<alias
	match="^a?arch sound (.+)$"
	regexp="y"
	enabled="y"
	sequence="101"
	script="set_sound"
	>
	</alias>
</aliases>

<!--  Script  -->


<script>
<![CDATA[
require "tprint"
require "gmcphelper"

my_aarch = {}
aarch_pcs = {}
aarch_pam = {}
ran = false

Dont_Run = false

bags = GetVariable("bags") or "'collection satchel'"
sounds = GetVariable("sounds") or "on"
sound_file = GetVariable("sound_file") or "C:\\Windows\\Media\\Cityscape\\Windows Feed Discovered.wav"
if sounds == "on" then
	SetVariable("sounds", sounds)
	EnableTrigger("professor", true)
elseif sounds == "off" then
	SetVariable("sounds", sounds)
	EnableTrigger("professor", false)
end

pamphlets = { ["Johnny's Appleseed"] = "1", ["An Ancient Skull"] = "2", ["A Golden Truffle"] = "3", ["An Ancient Game Token"] = "4", ["Neptune's Retired Staff"] = "5", ["Percival's Retired Crown"] = "6", ["Photo of an F1 Tornado"] = "7", ["A Ring of Thandeld"] = "8", ["Petrified Volcano Ash"] = "9", ["An Old Coyote's Tooth"] = "10", ["Dorothy's Lost Earring"] = "11", ["A Golden Cross"] = "12", ["Skeleton of a Goblin"] = "13", ["A Rusted Coin"] = "14", ["A Rusted Trumpet"] = "15", ["A Coffin Lid"] = "16", ["A Wedding Ring"] = "17", ["A Dinosaur Bone"] = "18", ["A Dragon's Tooth"] = "19", ["Unknown Element"] = "20", ["A Destroyed Mosaic"] = "21", ["A Silver Cross"] = "22", ["Lost Binoculars"] = "23", ["Pirate's Hat"] = "24", ["A Rusted Cleaver"] = "25", ["Wilted Rose"] = "26", ["Casino Chip"] = "27", ["Torn Visitor's Pass"] = "28", ["Ten-year-old Textbook"] = "29", ["Ivory Tusks"] = "30", ["An Oasis"] = "31", ["Skeleton of a Monkey"] = "32", ["An Ancient Stalactite"] = "33", ["Shoes of a Gnome"] = "34", ["A Torn Peace Agreement"] = "35", ["Chunk of an Iceberg"] = "36", ["Wings of a Harpy"] = "37", ["Petrified Tree Branch"] = "38", ["A Golden Leaf"] = "39", ["Writings of a Dream"] = "40", ["An Old Rope"] = "41", ["A Broken Twig"] = "42", ["Brick from a Castle"] = "43", ["A Rusted Belt Buckle"] = "44", ["A Biblical Textbook"] = "45", ["Frozen Flames"] = "46", ["Fox Tooth"] = "47", ["Picture of a Forest"] = "48", ["Moon in a Bottle"] = "49", ["Rotting Reed"] = "50" }
values = { ["1"] = "10k", ["2"] = "10k", ["3"] = "10k", ["4"] = "10k", ["5"] = "10k", ["6"] = "50k", ["7"] = "50k", ["8"] = "50k", ["9"] = "50k", ["10"] = "50k", ["11"] = "100k", ["12"] = "100k", ["13"] = "100k", ["14"] = "100k", ["15"] = "100k", ["16"] = "250k", ["17"] = "250k", ["18"] = "250k", ["19"] = "250k", ["20"] = "250k", ["21"] = "500k", ["22"] = "500k", ["23"] = "500k", ["24"] = "500k", ["25"] = "500k", ["26"] = "750k", ["27"] = "750k", ["28"] = "750k", ["29"] = "750k", ["30"] = "750k", ["31"] = "1mil", ["32"] = "1mil", ["33"] = "1mil", ["34"] = "1mil", ["35"] = "1mil", ["36"] = "2mil", ["37"] = "2mil", ["38"] = "2mil", ["39"] = "2mil", ["40"] = "2mil", ["41"] = "2mil", ["42"] = "5mil", ["43"] = "5mil", ["44"] = "5mil", ["45"] = "10mil", ["46"] = "10mil", ["47"] = "TP", ["48"] = "TP", ["49"] = "TP", ["50"] = "TP" }

local arch_alph = {}
for p, a in pairs(pamphlets) do
	arch_alph[tonumber(a)] = p
end
table.sort(arch_alph)

--local tots = 0
--for i, p in pairs(values) do
--	p = string.gsub(p, "k", "000")
--	p = string.gsub(p, "mil", "000000")
--	p = string.gsub(p, "TP", "4000000")
--	--Note(p)
--	tots = tots + tonumber(p)
--end
--Note("total: "..tots)

function set_sound(name, line, args)
	local snd = string.gsub(args[1], "\\", "\\\\")
	local f = io.open(snd, "r")
	if not f then
		ColourNote("cyan", "", "  Invalid sound file name!")
		return
	end
	sound_file = snd
	SetVariable("sound_file", sound_file)
	SaveState()
	local clean_file = string.gsub(sound_file, "\\\\", "\\")
	ColourNote("yellow", "", "  Aarch alert sound file: ", "cyan", "", clean_file)
end

function sound(name, line, args)
	local snd = args[1]
	if snd == "on" then
		SetVariable("sounds", snd)
		EnableTrigger("professor", true)
		ColourNote("yellow", "", "\n  Aarch Professor alert is ", "cyan", "", "on", "yellow", "", ".")
	elseif snd == "off" then
		SetVariable("sounds", snd)
		EnableTrigger("professor", false)
		ColourNote("yellow", "", "\n  Aarch Professor alert is ", "cyan", "", "off", "yellow", "", ".")
	else
		ColourNote("yellow", "", "\n  Invalid sound option.  ", "cyan", "", "<on|off>")
		return
	end
	SaveState()
end

function play_sound()
	Sound(sound_file)
end

function aarch_bag(name, line, args)
	if args[1] then
		bags = args[1]
		SetVariable("bags", bags)
		SaveState()
	end
	Note("")
	display_bags()
	Note("")
end

function selling_aarch(name, line, args, styles)
	local sts = find_status(args.piece)
	local trn = find_turnin(args.piece)
	local w = 0
	for i, s in ipairs(styles) do
		ColourTell(RGBColourToName(s.textcolour), "", s.text)
		if s.text == "Aarchaeology" then
			w = i + 2
		end
		if i == w then
			ColourTell("magenta", "", " [", "cyan", "", trn, "magenta", "", "] [", "cyan", "", sts, "magenta", "", "]")
		end
	end
	Note("")
end

function display_bags()
	local pad
	if string.find(bags, ",") then
		ColourTell("yellow", "", "  Aarch plugin bags set to: ")
		pad = "                            "
	else
		ColourTell("yellow", "", "  Aarch plugin bag set to: ")
		pad = "                           "
	end
	local cnt = 0
	for s in string.gmatch(bags, "([^,]+)") do
		cnt = cnt + 1
		if cnt > 1 then
			Tell(pad)
		end
		ColourTell("cyan", "", s.."\n")
	end
end

function trim(str)
  return (str:gsub("^%s*(.-)%s*$", "%1"))
end

function find_status(piece)
	local pc = 0
	local pam = 0
	local status = ""
	local both = false
	if piece == "Skeleton of a" then
		both = true
		piece = "Skeleton of a Goblin"
	elseif piece == "Chunk of an Iceburg" then
		piece = "Chunk of an Iceberg"
	end
	for p, n in pairs(aarch_pam) do
		if (string.sub(p, 1, string.len(piece)) == piece) or (piece == p) then
			pam = tonumber(aarch_pam[p])
		end
	end
	if pam == 1 then
		pam = pam.." Pam"
	elseif pam > 1 then
		pam = pam.." Pams"
	else
		pam = ""
	end
	for p, n in pairs(aarch_pcs) do
		if (string.sub(p, 1, string.len(piece)) == piece) or (piece == p) then
			pc = tonumber(aarch_pcs[p])
			break
		end
	end
	if both and piece == "Skeleton of a Goblin" then
		pc = pc.." Gob"
	elseif both and piece == "Skeleton of a Monkey" then
		pc = pc.." Mon"
	elseif pc == 1 then
		pc = pc.." Pc"
	elseif pc > 1 then
		pc = pc.." Pcs"
	else
		pc = ""
	end
	
	if both and piece == "Skeleton of a Goblin" and pam ~= "" then
		return pc.."/"..pam.."|"..find_status("Skeleton of a Monkey")
	elseif both and piece == "Skeleton of a Goblin" then
		return pc.."|"..find_status("Skeleton of a Monkey")
	elseif pc ~= "" and pam ~= "" then
		return pc.."/"..pam
	elseif pc ~= "" and pam == "" then
		return pc
	elseif pc == "" and pam ~= "" then
		return pam
	else
		return "Need"
	end
	return ""
end

function do_skeleton()
	return "skel"
end

function find_turnin(piece)
	local both = false
	if piece == "Skeleton of a" then
		both = true
		piece = "Skeleton of a Goblin"
	elseif piece == "Chunk of an Iceburg" then
		piece = "Chunk of an Iceberg"
	end
	for p, n in pairs(pamphlets) do
		if (string.sub(p, 1, string.len(piece)) == piece) or (piece == p) then
			if both and piece == "Skeleton of a Goblin" then
				return values[n].."|"..find_turnin("Skeleton of a Monkey")
			else
				return values[n]
			end
		end
	end
	Note("Not found: "..piece)
	return ""
end

function bid_aarch(name, line, args, styles)
	local pc = trim(args[2])
	local status = find_status(pc)
	local turnin = find_turnin(pc)
	for i, s in ipairs(styles) do
		ColourTell(RGBColourToName(s.textcolour), "", s.text)
	end
	ColourNote("magenta", "", " [", "cyan", "", status, "magenta", "", "] ", "magenta", "", "[", "cyan", "", turnin, "magenta", "", "]")
end

function lbid_aarch(name, line, args, styles)
	local pc = trim(args[2])
	local status = find_status(pc)
	local turnin = find_turnin(pc)
	for i, s in ipairs(styles) do
		ColourTell(RGBColourToName(s.textcolour), "", s.text)
	end
	ColourNote("magenta", "", " [", "cyan", "", status, "magenta", "", "] ", "magenta", "", "[", "cyan", "", turnin, "magenta", "", "]")
end

function display_aarch(name, line, args, styles)
	local c = args[1]
	local cnt = c
	if (cnt == "") then
		cnt = 1
	else
		cnt = string.sub(cnt, string.find(cnt, "%d+"))
	end
	local pc = trim(args[3])
	local pc2 = pc
	if pc2 == "Chunk of an Iceburg" then
		pc2 = "Chunk of an Iceberg"
	end
	local turnin = find_turnin(pc2)
	
	if GetTriggerInfo("done_look", 8) then
		my_aarch[pc] = pamphlets[pc]
		if (aarch_pcs[pc2]) then
			aarch_pcs[pc2] = aarch_pcs[pc2] + cnt
		else
			aarch_pcs[pc2] = tonumber(cnt)
		end
	end
	
	if pamphlets[pc2] then
		p = "#"..pamphlets[pc2]
	else
		p = "Unk"
	end
	local w = 0
	for i, s in ipairs(styles) do
		ColourTell(RGBColourToName(s.textcolour), "", s.text)
		if s.text == "Aarchaeology" then
			w = i + 2
		end
		if i == w then
			ColourTell("magenta", "", " [", "cyan", "", "Pamphlet ", "white", "", p, "magenta", "", "] ", "magenta", "", "[", "cyan", "", turnin, "magenta", "", "]")
		end
	end
	Note("")
end

function found_pamphlet(name, line, args)
	if GetTriggerInfo("done_look", 8) then
		local c = args[1]
		if (c == "") then
			c = 1
		else
			c = string.sub(c, string.find(c, "%d+"))
		end
		local num = args[6]
		for pc, v in pairs(pamphlets) do
			if v == num then
				my_aarch[pc] = num
				if (aarch_pam[pc]) then
					aarch_pam[pc] = aarch_pam[pc] + c
				else
					aarch_pam[pc] = tonumber(c)
				end
			end
		end
	end
end

function cant_look(name, line, args)
	if GetTriggerOption("done_look", "enabled") == 1 then
		Dont_Run = true
		ColourNote("cyan", "", "\n  You cannot run an Aarch report while sleeping!")
	end
end

function done_look(name, line, args)
	EnableTrigger("cant_look", false)
	EnableTrigger("done_look", false)
	if Dont_Run == false then
		aarch_report()
	end
end

function run_report(name, line, args)
	ran = true
	go()
end

function aarch_report(name, line, args)
	local cnt = 0
	local pcs = {}
	for x, _ in pairs(pamphlets) do
		if my_aarch[x] == nil then
			cnt = cnt + 1
			table.insert(pcs, x)
		end
	end
	
	if cnt == 0 then
		ColourNote("magenta", "", "------------------------------------------------------------------------------------")
		ColourNote("cyan", "", "\n You have all 50 ", "red", "", "(", "yellow", "", "Aarchaeology", "red", "", ") ", "cyan", "", "pieces.  Nice work!\n")
		ColourNote("magenta", "", "------------------------------------------------------------------------------------")
	else
		local suff = ""
		ColourNote("magenta", "", "\n\n------------------------------------------------------------------------------------")
		if cnt > 1 or cnt == 0 then
			suff = "s"
		end
		ColourNote("cyan", "", " You are missing ", "white", "", cnt, "red", "", " (", "yellow", "", "Aarchaeology", "red", "", ") ", "cyan", "", "piece"..suff..":")
		ColourNote("magenta", "", "------------------------------------------------------------------------------------")
		local x = 0
		Tell(" ")
		for _, apc in ipairs(arch_alph) do
			for i, v in ipairs(pcs) do
				if pcs[i] == apc then
					local turnin = find_turnin(trim(pcs[i]))
					x = x + 1
					ColourTell("gray", "", "[", "silver", "", pamphlets[pcs[i]], "gray", "", "] ", "white", "", pcs[i], "magenta", "", " [", "cyan", "", turnin, "magenta", "", "]")
					if i < table.getn(pcs) then
						ColourTell("yellow", "", ", ")
					end
					if x == 3 then
						x = 0
						Tell("\n ")
					end
				end
			end
		end
		
		ColourNote("magenta", "", "\n------------------------------------------------------------------------------------")
		ColourNote("yellow", "", " Happy hunting!")
		ColourNote("magenta", "", "------------------------------------------------------------------------------------")
	end
	ColourNote("magenta", "", "------------------------------------------------------------------------------------")
	ColourNote("cyan", "", " Duplicates:")
	ColourNote("magenta", "", "------------------------------------------------------------------------------------")
	local dcnt = 0
	local totalval = 0
	local totaltp = 0
	local cval = 0
	local px = 0
	for i, apc in ipairs(arch_alph) do
	--for pc, v in pairs(aarch_pcs) do
		if aarch_pcs[apc] then
			v = aarch_pcs[apc]
			px = px + v
			cval = tostring(values[pamphlets[apc]])
			if cval == "TP" then
				totaltp = totaltp + v
			elseif string.find(cval, "k") then
				cval = string.gsub(cval, "k", "000")
				totalval = totalval + (v * tonumber(cval))
			elseif string.find(cval, "mil") then
				cval = string.gsub(cval, "mil", "000000")
				totalval = totalval + (v * tonumber(cval))
			end
			
			local fnd = false
			local pcsuff = ""
			local pamsuff = ""
			if v > 2 then
				pcsuff = "s"
			end
			local turnin = find_turnin(trim(apc))
			for pam, vv in pairs(aarch_pam) do
				if apc == pam then
					fnd = true
					if v > 1 then
						pcsuff = "s"
					end
					if vv > 1 then
						pamsuff = "s"
					end
					dcnt = dcnt + 1
					ColourNote("gray", "", "[", "silver", "", string.format("%3s", "#"..pamphlets[apc]), "gray", "", "]", "white", "", " "..apc, "magenta", "", " - ", "yellow", "", v.." Extra Piece"..pcsuff..", "..vv.." Pamphlet"..pamsuff.." ", "magenta", "", "[", "cyan", "", turnin, "magenta", "", "]")
				end
			end
			if (fnd == false) and (v > 1) then
				dcnt = dcnt + 1
				ColourNote("gray", "", "[", "silver", "", string.format("%3s", "#"..pamphlets[apc]), "gray", "", "]", "white", "", " "..apc, "magenta", "", " - ", "yellow", "", (v - 1).." Extra Piece"..pcsuff.." ", "magenta", "", "[", "cyan", "", turnin, "magenta", "", "]")
			end
		end
	end
	if dcnt == 0 then
		ColourNote("yellow", "", "  None.")
	end
	ColourNote("magenta", "", "------------------------------------------------------------------------------------")
	ColourNote("magenta", "", "------------------------------------------------------------------------------------")
	if totalval > 0 or totaltp > 0 then
		ColourTell("silver", "", " Value of ", "white", "", px.." ", "red", "", "(", "yellow", "", "Aarchaeology", "red", "", ")", "silver", "", " pieces not turned in yet:  ")
	end
	if totalval > 0 then
		ColourTell("white", "", format_pos_number(totalval), "gold", "", " Gold")
	end
	if totalval > 0 and totaltp > 0 then
		ColourTell("silver", "", "  and  ")
	end
	if totaltp > 0 then
		ColourTell("white", "", totaltp, "lime", "", " TP")
	end
	ColourNote("magenta", "", "\n------------------------------------------------------------------------------------\n\n")
	
end

function format_pos_number(num)
	return tostring(num):reverse():gsub("%d%d%d", "%1,"):reverse():gsub("^,", "")
end

function aarch_help(name, line, args)
	Note(GetPluginInfo(GetPluginID(), 3))
end

function OnPluginBroadcast (msg, id, name, text)
	if id == "3e7dedbe37e44942dd46d264" then
		if text == "char.status" then
			local s = gmcp("char.status.state")
			if not ran then
				if s == "3" or s == "11" then
					Note("Auto running aarchaeology report.")
					run_report()
				end
			end
		end
	end
end

function go()
	my_aarch = {}
	aarch_pcs = {}
	aarch_pam = {}
	Dont_Run = false
	EnableTrigger("cant_look", true)
	EnableTrigger("done_look", true)
	for s in string.gmatch(bags, "([^,]+)") do
		if s == "vault list" then
			Send("vault list")
		else
			Send("look in "..s)
		end
	end
	SendNoEcho("echo @YLooked in Aarch Bags!")
end

ColourNote("orange", "", "-------------------------------------------------")
ColourNote("yellow", "", "  Aarchaeology 2 plugin installed!")
ColourNote("yellow", "", "\n  Type '", "cyan", "", "aarch help", "yellow", "", "' to view the help file.")
ColourNote("yellow", "", "  Aarch Professor alert is ", "cyan", "", sounds, "yellow", "", ".")
local clean_file = string.gsub(sound_file, "\\\\", "\\")
ColourNote("yellow", "", "  Aarch alert sound file: ", "cyan", "", clean_file)
display_bags()
ColourNote("orange", "", "-------------------------------------------------")

function MarketDisable()

	world.EnableGroup ("AarchDisable", 0)
	
end

function MarketEnable()

	world.EnableGroup ("AarchDisable", 1)
	
end


]]>
</script>
</muclient>