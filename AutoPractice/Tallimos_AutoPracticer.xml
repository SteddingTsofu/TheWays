<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Wednesday, November 18, 2020, 4:27 PM -->
<!-- MuClient version 5.07-pre -->

<!-- Plugin "Tallimos_AutoPracticer" generated by Plugin Wizard -->

<muclient>
<plugin
   name="Tallimos_AutoPracticer"
   author="Tallimos"
   id="177bb38a4532781455683ec9"
   language="Lua"
   purpose="Auto Practice certain skills and spells"
   save_state="y"
   date_written="2020-11-18 16:26:33"
   requires="4.30"
   version="1.0"
   >

</plugin>


<!--  Get our standard constants -->

<include name="constants.lua"/>

<!--  Triggers  -->

<triggers>
	<trigger
		script="PracticeSingle_Disable"
		group="PracticedSingleDisable"
		match="^Disable Single Practice$"
		sequence="100"
		regexp="y"
		omit_from_output="y"
		>
	</trigger>
	<trigger
		group="SCheck"
		match="^\[\*\] This spell cannot be cast from an object\."
		sequence="100"
		regexp="y"
		omit_from_output="y"
		>
	</trigger>
	<trigger
		group="SCheck"
		match="^\[\*\] This spell can only be used from objects by"
		sequence="100"
		regexp="y"
		omit_from_output="y"
		>
	</trigger>
	<trigger
		group="SCheck"
		match="^\s+people who can cast the spell naturally\."
		sequence="100"
		regexp="y"
		omit_from_output="y"
		>
	</trigger>
	<trigger
		group="SCheck"
		match="^Damage Type\s+\:\s+(.?)"
		sequence="100"
		regexp="y"
		omit_from_output="y"
		>
	</trigger>
	<trigger
		group="SCheck"
		match="^------------------------------------------------------$"
		sequence="100"
		regexp="y"
		omit_from_output="y"
		>
	</trigger>
	<trigger
		group="SCheck"
		match="^(Mage|Cleric|Thief|Warrior|Ranger|Paladin|Psionicist)\s+Level\s+\:\s+(N/A|(\d+))"
		sequence="100"
		regexp="y"
		omit_from_output="y"
		>
	</trigger>
	<trigger
		group="SCheck"
		match="^Your Level\s+\: (\d+)\s+Learned\:\s+(\d+)\%"
		sequence="100"
		regexp="y"
		omit_from_output="y"
		>
	</trigger>
	<trigger
		group="SCheck"
		match="^You are affected by this skill for (/d+) more seconds\.$"
		sequence="100"
		regexp="y"
		omit_from_output="y"
		>
	</trigger>
	<trigger
		group="SCheck"
		script="SkillCheckYes"
		match="^\s+Levels for (.*?) \(Sn\: (\d+)\)\s+\((.*?)\)"
		sequence="100"
		regexp="y"
		omit_from_output="y"
		>
	</trigger>
	<trigger
		group="SCheck"
		script="SkillCheckNo"
		match="^(.*?) is not a valid skill or spell\.$"
		sequence="100"
		regexp="y"
		omit_from_output="y"
		>
	</trigger>
	<trigger
		group="WishList"
		match="^Your total adjustment cost is\: (\d+)$"
		sequence="100"
		regexp="y"
		omit_from_output="y"
		>
	</trigger>
	<trigger
		group="WishList"
		match="^Your quest points on hand are\: (\d+)$"
		sequence="100"
		regexp="y"
		omit_from_output="y"
		>
	</trigger>
	<trigger
		group="WishList"
		match="^\s+Base Cost Adjustment Your Cost\s+Keyword$"
		sequence="100"
		regexp="y"
		omit_from_output="y"
		>
	</trigger>
	<trigger
		group="WishList"
		match="^ ---------------------------------- --------- ---------- --------- -----------$"
		sequence="100"
		regexp="y"
		omit_from_output="y"
		>
	</trigger>
	<trigger
		group="WishList"
		script="ListCaptureDisable"
		match="^Refer to \'help wish\' for a description of each wish\.$"
		sequence="100"
		regexp="y"
		omit_from_output="y"
		>
	</trigger>
	<trigger
		group="WishList"
		script="ListCapture"
		match="^(?:\*|\s)(.*?)\s+(\d+)\s+(\d+)\s+(.*?) (\w+)"
		sequence="100"
		regexp="y"
		omit_from_output="y"
		>
	</trigger>
	<trigger
		script="Practiced"
		group="Practiced"
		match="^Your new skill level in (.*?) is (\d+)\%\.$"
		name="Practiced"
		regexp="y"
		sequence="100"
		omit_from_output="y"
		>
	</trigger>
	<trigger
		script="PracticeRemaining"
		group="Practiced"
		match="^You have (\d+) practice sessions remaining\.$"
		name="PracticeRemaining"
		regexp="y"
		sequence="100"
		omit_from_output="y"
		>
	</trigger>
	<trigger
		script="NowExpert"
		group="Practiced"
		match="^You are now an expert in (.*?)\.$"
		name="NowExpert"
		regexp="y"
		sequence="100"
		omit_from_output="y"
		>
	</trigger>
	<trigger
		script="PracticedSingle"
		group="PracticedSingle"
		match="^Your new skill level in (.*?) is (\d+)\%\.$"
		name="PracticedSingle"
		regexp="y"
		sequence="100"
		omit_from_output="y"
		>
	</trigger>
	<trigger
		script="PracticeRemaining"
		group="PracticedSingle"
		match="^You have (\d+) practice sessions remaining\.$"
		name="PracticeRemainingSingle"
		regexp="y"
		sequence="100"
		omit_from_output="y"
		>
	</trigger>
	<trigger
		script="NowExpertSingle"
		group="PracticedSingle"
		match="^You are now an expert in (.*?)\.$"
		name="NowExpertSingle"
		regexp="y"
		sequence="100"
		omit_from_output="y"
		>
	</trigger>
	<trigger
		script="AlreadyExpert"
		group="PracticedSingle"
		match="^You are already an expert in (.*?)\.$"
		name="AlreadyExpert"
		regexp="y"
		sequence="100"
		omit_from_output="y"
		>
	</trigger>
	<trigger
		script="NobodyHere"
		group="NobodyHere"
		match="^There is nobody here to help you practice\.$"
		name="NobodyHere"
		regexp="y"
		sequence="100"
		omit_from_output="y"
		>
	</trigger>
	<trigger
		script="DSSkills_Level"
		group="DS_Skills"
		match="^Level\s+(\d+)\s+\:\s+(.*?)\s+(\d+)\%"
		name="DS_Skills_Level"
		regexp="y"
		sequence="100"
		omit_from_output="y"
		ignore_case="y"	
		>
	</trigger>
	<trigger
		script="DSSkills_Level"
		group="DS_Skills"
		match="^Level\s+(\d+)\:\s+(.*?)\s+(\d+)\%"
		name="DS_Skills_Level_NoSpace"
		regexp="y"
		sequence="100"
		omit_from_output="y"
		ignore_case="y"	
		>
	</trigger>
	<trigger
		script="DSSkills"
		group="DS_Skills"
		match="^\s+(.*?)\s+(\d+)\%"
		name="DS_Skills"
		regexp="y"
		sequence="100"
		omit_from_output="y"
		ignore_case="y"
		>
	</trigger>
	<trigger
		script="DSSkillsDisable"
		group="DS_Skills"
		match="^To see all skills/spells for your class\, use \'allspells \<class\>\'"
		name="DS_SkillsDisable"
		regexp="y"
		sequence="100"
		omit_from_output="y"		
		>
	</trigger>
	<trigger
		group="DS_Skills"
		match="^\s+Skill name\s+Learned"
		name="DS_SkillsHeader"
		regexp="y"
		sequence="100"
		omit_from_output="y"		
		>
	</trigger>
	<trigger
		group="DS_Skills"
		match="^---------- -------------------------- -------"
		name="DS_SkillsHeaderLine"
		regexp="y"
		sequence="100"
		omit_from_output="y"		
		>
	</trigger>
	<trigger
		group="DS_Skills"
		match="^---------------------------------------------"
		name="DS_SkillsLine"
		regexp="y"
		sequence="100"
		omit_from_output="y"		
		>
	</trigger>
	<trigger
		group="DS_Skills"
		match="^You have (\d+) abilities forgotten\."
		name="DS_SkillsForgotten"
		regexp="y"
		sequence="100"
		omit_from_output="y"		
		>
	</trigger>
	<trigger
		script="DSSpells_Level"
		group="DS_Spells"
		match="^Level\s+(\d+)\s+\:\s+(.*?)\s+(\d+)\s+(\d+)\%\s+(\d+)"
		name="DS_Spells_Level"
		regexp="y"
		sequence="100"
		omit_from_output="y"
		ignore_case="y"
		>
	</trigger>
	<trigger
		script="DSSpells_Level"
		group="DS_Spells"
		match="^Level\s+(\d+)\:\s+(.*?)\s+(\d+)\s+(\d+)\%\s+(\d+)"
		name="DS_Spells_Level_NoSpace"
		regexp="y"
		sequence="100"
		omit_from_output="y"
		ignore_case="y"
		>
	</trigger>
	<trigger
		script="DSSpells"
		group="DS_Spells"
		match="^\s+(.*?)\s+(\d+)\s+(\d+)\%\s+(\d+)"
		name="DS_Spells"
		regexp="y"
		sequence="100"
		omit_from_output="y"		
		>
	</trigger>
		<trigger
		script="DSSpellsDisable"
		group="DS_Spells"
		match="^To see all skills/spells for your class\, use \'allspells \<class\>\'"
		name="DS_SpellsDisable"
		regexp="y"
		sequence="100"
		omit_from_output="y"
		>
	</trigger>
	<trigger
		group="DS_Spells"
		match="^\s+Spell name\s+Mana\s+Learned\s+Spell\#"
		name="DS_SpellsHeader"
		regexp="y"
		sequence="100"
		omit_from_output="y"		
		>
	</trigger>
	<trigger
		group="DS_Spells"
		match="^---------- -------------------------- ----  -------  ------"
		name="DS_SpellsHeaderLine"
		regexp="y"
		sequence="100"
		omit_from_output="y"		
		>
	</trigger>
	<trigger
		group="DS_Spells"
		match="^-----------------------------------------------------------"
		name="DS_SpellsLine"
		regexp="y"
		sequence="100"
		omit_from_output="y"		
		>
	</trigger>
	<trigger
		group="DS_Spells"
		match="^You have (\d+) abilities forgotten\."
		name="DS_SpellsForgotten"
		regexp="y"
		sequence="100"
		omit_from_output="y"		
		>
	</trigger>
</triggers>

<!--  Timers  -->

<timers>
	<timer name="SCheck" 
		second="1"  
		enabled="n"
		script="SkillCheckOff"
		>
	</timer>
</timers>

<!--  Aliases  -->

<aliases>
	<alias
		script="AutoPracticeScholar"
		match="^(?:tap|tautopractice) scholar (on|off)$"
		expand_variables="y"
		regexp="y"
		sequence="100"
		enabled="y"
		ignore_case="y"
		>
	</alias>
	<alias
		script="AutoPracticeAbort"
		match="^(?:tap|tautopractice) abort$"
		expand_variables="y"
		regexp="y"
		sequence="100"
		enabled="y"
		ignore_case="y"
		>
	</alias>
	<alias
		script="AutoPracticeEnable"
		match="^(?:tap|tautopractice)$"
		expand_variables="y"
		regexp="y"
		sequence="100"
		enabled="y"
		ignore_case="y"
		>
	</alias>
	<alias
		script="AutoPracticeEnableSingle"
		match="^(?:tap|tautopractice) max (.*?)$"
		expand_variables="y"
		regexp="y"
		sequence="110"
		enabled="y"
		ignore_case="y"
		>
	</alias>
	<alias
		script="AutoPracticeSpellToggle"
		match="^(?:tap|tautopractice) (on|off|yes|no) (.*?)$"
		expand_variables="y"
		regexp="y"
		sequence="110"
		enabled="y"
		ignore_case="y"
		>
	</alias>
	<alias
		script="AutoPracticeSpellAddEnable"
		match="^(?:tap|tautopractice) Add (.*?)$"
		expand_variables="y"
		regexp="y"
		sequence="90"
		enabled="y"
		ignore_case="y"
		>
	</alias>
	<alias
		script="AutoPracticeSpellRemove"
		match="^(?:tap|tautopractice) Remove (.*?)$"
		expand_variables="y"
		regexp="y"
		sequence="90"
		enabled="y"
		ignore_case="y"
		>
	</alias>
	<alias
		script="tap_help"
		match="^(?:tap|tautopractice) help$"
		expand_variables="y"
		regexp="y"
		sequence="90"
		enabled="y"
		ignore_case="y"
		>
	</alias>
</aliases>

<!--  Script  -->

<script>

<![CDATA[

require "aard_register_z_on_create"

require "themed_miniwindows"

require "tprint"
require "mw_theme_base"
require "serialize"
require "commas"
require "gmcphelper"
require "copytable"
require "aardmapper"
require "aard_lua_extras"
require "wait"

----------------------------START OF VARIABLE DECLARATIONS----------------------------

local msg_colour      = "darkslategrey"
local err_colour      = "firebrick"
local help_colour     = "royalblue"
local qty_colour      = "yellow"
local optional_colour = "lightcoral"
local command_colour  = "white"
local cmd_required    = "royalblue"
local help_command_colour  = "red"

local line = "=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-="

minpercent = 85
practices = 0
practiceinprogress = "NO"
skillsdone = "NO"
AutoAbort = "YES"
ScholarCheck = "NO"
SingleCheck = "NO"
APSName = ""
isskill = "YES"

function AutoPracticeAbort()

	if AutoAbort == "YES" then
		ColourNote(msg_colour, "", "Aborting AutoPractice.")
	end

	world.EnableGroup ("PracticedSingleDisable", 0)
	world.EnableGroup ("DS_Skills", 0)
	world.EnableGroup ("DS_Spells", 0)
	world.EnableGroup ("SCheck", 0)
	world.EnableGroup ("WishList", 0)
	world.EnableGroup ("Practiced", 0)
	world.EnableGroup ("PracticedSingle", 0)
	world.EnableGroup ("NobodyHere", 0)
	check (EnableTimer ("SCheck", 0))
	
end

function AutoPracticeEnable()

	ColourNote(msg_colour, "white", "Commencing AutoPractice, please stand by.")
	AutoPractice()
	
end

function AutoPractice()
	
	if ScholarCheck == "NO" then
		ListCaptureEnable()
		return
	end
	
	world.EnableGroup ("NobodyHere", 1)
	
	GetIntial()

	AutoAbort = "YES"
	
	if skillsdone == "NO" then
		world.EnableGroup ("DS_Skills", 1)
		practiceinprogress = "NO"
		SendNoEcho ("skills")
	elseif skillsdone == "YES" then
		world.EnableGroup ("DS_Spells", 1)
		practiceinprogress = "NO"
		SendNoEcho ("spells")
	end
end
	
function Practiced(name, line, wc)

	local sname = wc[1]
	local spercent = tonumber(wc[2])
	
	if spercent < minpercent then
		if practices > 0 then
			SendNoEcho ("practice '" .. sname .."'")
		else
			ColourNote(msg_colour, "", "You have run out of practice sessions, deactivating autopractice")
			AutoAbort = "NO"
			AutoPracticeAbort()
		end
	else
		AutoPractice()
	end

end

function PracticeRemaining(name, line, wc)

	practices = tonumber(wc[1])
	
end

function NowExpert(name, line, wc)

	local sname = wc[1]
	
	AutoPractice()
	
end

function SkillCheckOff()

	world.EnableGroup ("SCheck", 0)
	check (EnableTimer ("SCheck", 0))

	if checktype == "add" then
		AutoPracticeSpellAdd()
	elseif checktype == "single" then
		AutoPracticeSingle()
	end
	
end

function SkillCheckNo()
	
	isskill = "NO"
	check (EnableTimer ("SCheck", 1))
	check (ResetTimer ("SCheck"))

end

function SkillCheckYes()
	
	isskill = "YES"
	check (EnableTimer ("SCheck", 1))
	check (ResetTimer ("SCheck"))
	
end

function SkillCheckEnable(skill)
	
	local skill = skill 
	
	world.EnableGroup ("SCheck", 1)
	SendNoEcho ("show " .. skill)
	
end

function AutoPracticeEnableSingle(name, line, wc)
	
	skilladdcheck = string.lower(wc[1])

	SkillCheckEnable(skilladdcheck)
	
	checktype = "single"
	
end

function AutoPracticeSingle()
	
	if isskill == "YES" then
	
		SingleCheck = "YES"
		
		if ScholarCheck == "NO" then
			ListCaptureEnable()
			return
		end

		GetIntial()
		
		world.EnableGroup ("NobodyHere", 1)		
		world.EnableGroup ("PracticedSingle", 1)
		
		SendNoEcho ("practice '" .. skilladdcheck .. "'")
	else
		ColourNote(qty_colour, "", skilladdcheck, msg_colour, "", " is not a skill or a spell.")
	end
end

function PracticedSingle(name, line, wc)

	local sname = wc[1]
	
	if practices > 0 then
		SendNoEcho ("practice '" .. sname .."'")
	else
		ColourNote(msg_colour, "", "You have run out of practice sessions, deactivating autopractice")
		AutoAbort = "NO"
		AutoPracticeAbort()
	end

end

function NowExpertSingle(name, line, wc)

	local sname = wc[1]
	SingleCheck = "NO"
	
	ColourNote(qty_colour, "", sname, msg_colour, "", " has been fully practiced.")

	world.EnableGroup ("PracticedSingleDisable", 1)
	
	SendNoEcho ("echo Disable Single Practice")
	
end

function PracticeSingle_Disable()

	world.EnableGroup ("PracticedSingle", 0)
	world.EnableGroup ("PracticedSingleDisable", 0)
	
end

function AlreadyExpert(name, line, wc)

	local sname = wc[1]
	SingleCheck = "NO"
	
	world.EnableGroup ("PracticedSingle", 0)

	ColourNote(msg_colour, "", "You are already an expert at ", qty_colour, "", sname)

end

function NobodyHere()

	ColourNote(msg_colour, "", "No trainer in your current location. Please visit a trainer and try again.")

	world.EnableGroup ("PracticedSingleDisable", 0)
	world.EnableGroup ("DS_Skills", 0)
	world.EnableGroup ("DS_Spells", 0)
	world.EnableGroup ("SCheck", 0)
	world.EnableGroup ("WishList", 0)
	world.EnableGroup ("Practiced", 0)
	world.EnableGroup ("PracticedSingle", 0)
	world.EnableGroup ("NobodyHere", 0)
	
	SingleCheck = "NO"
	
end 

function DSSkills(name, line, wc)

	if practiceinprogress == "YES" then
	else

		local skillname = string.lower(wc[1])
		local skillpercent = tonumber(wc[2])
				
		if skillpercent < minpercent then
			if PracticeTable[skillname] == "" or PracticeTable[skillname] == nil then
			else
				if skillname == "backstab" then
					if PracticeTable[skillname] == 1 then
						if gmcpcharpclass == "thief" then
							if practices > 0 then
								practiceinprogress = "YES"
								world.EnableGroup ("Practiced", 1)
								SendNoEcho ("practice '" .. skillname .."'")
								return
							end
						end
					end
				elseif skillname == "sneak" then
					if PracticeTable[skillname] == 1 then
						if gmcpcharpclass == "elf" or gmcpcharpclass == "wolfen" then
						else
							if practices > 0 then
								practiceinprogress = "YES"
								world.EnableGroup ("Practiced", 1)
								SendNoEcho ("practice '" .. skillname .."'")
								return
							end
						end
					end
				elseif skillname == "shadow form" then
					if PracticeTable[skillname] == 1 then
						if gmcpcharpclass == "shadow" then
						else
							if practices > 0 then
								practiceinprogress = "YES"
								world.EnableGroup ("Practiced", 1)
								SendNoEcho ("practice '" .. skillname .."'")
								return
							end
						end
					end
				else
					if PracticeTable[skillname] == 1 then
						if practices > 0 then
							practiceinprogress = "YES"
							world.EnableGroup ("Practiced", 1)
							SendNoEcho ("practice '" .. skillname .."'")
							return
						end
					end
				end
			end
		end
	end
end

function DSSkills_Level(name, line, wc)

	if practiceinprogress == "YES" then
	else

		local skillname = string.lower(wc[2])
		local skillpercent = tonumber(wc[3])
				
		if skillpercent < minpercent then
			if PracticeTable[skillname] == "" or PracticeTable[skillname] == nil then
			else
				if skillname == "backstab" then
					if PracticeTable[skillname] == 1 then
						if gmcpcharpclass == "thief" then
							if practices > 0 then
								practiceinprogress = "YES"
								world.EnableGroup ("Practiced", 1)
								SendNoEcho ("practice '" .. skillname .."'")
								return
							end
						end
					end
				elseif skillname == "sneak" then
					if PracticeTable[skillname] == 1 then
						if gmcpcharpclass == "elf" or gmcpcharpclass == "wolfen" then
						else
							if practices > 0 then
								practiceinprogress = "YES"
								world.EnableGroup ("Practiced", 1)
								SendNoEcho ("practice '" .. skillname .."'")
								return
							end
						end
					end
				elseif skillname == "shadow form" then
					if PracticeTable[skillname] == 1 then
						if gmcpcharpclass == "shadow" then
						else
							if practices > 0 then
								practiceinprogress = "YES"
								world.EnableGroup ("Practiced", 1)
								SendNoEcho ("practice '" .. skillname .."'")
								return
							end
						end
					end
				else
					if PracticeTable[skillname] == 1 then
						if practices > 0 then
							practiceinprogress = "YES"
							world.EnableGroup ("Practiced", 1)
							SendNoEcho ("practice '" .. skillname .."'")
							return
						end
					end
				end
			end
		end
	end
end

function DSSkillsDisable()

	if practiceinprogress == "YES" then
	else
		world.EnableGroup ("DS_Skills", 0)
		world.EnableGroup ("DS_Spells", 1)
		skillsdone = "YES"
		SendNoEcho ("spells")
	end
	
end

function DSSpells(name, line, wc)

	if practiceinprogress == "YES" then
	else
	
		local skillname = string.lower(wc[1])
		local skillpercent = tonumber(wc[3])

		if skillpercent < minpercent then
			if PracticeTable[skillname] == "" or PracticeTable[skillname] == nil then
			else
				if skillname == "flying" then
					if PracticeTable[skillname] == 1 then		
						if gmcpcharpclass == "shadow" or gmcpcharpclass == "sprite" or gmcpcharpclass == "half-grif" or gmcpcharpclass == "vampire" then
						else
							if practices > 0 then
								practiceinprogress = "YES"
								world.EnableGroup ("Practiced", 1)
								SendNoEcho ("practice '" .. skillname .."'")
								return
							end
						end
					end
				elseif skillname == "invis" then
					if PracticeTable[skillname] == 1 then					
						if gmcpcharpclass == "sprite" then
						else
							if practices > 0 then
								practiceinprogress = "YES"
								world.EnableGroup ("Practiced", 1)
								SendNoEcho ("practice '" .. skillname .."'")
								return
							end
						end
					end
				elseif skillname == "haste" then
					if PracticeTable[skillname] == 1 then
						if gmcpcharpclass == "quickling" then
						else
							if practices > 0 then
								practiceinprogress = "YES"
								world.EnableGroup ("Practiced", 1)
								SendNoEcho ("practice '" .. skillname .."'")
								return
							end
						end
					end
				else
					if PracticeTable[skillname] == 1 then
						if practices > 0 then
							practiceinprogress = "YES"
							world.EnableGroup ("Practiced", 1)
							SendNoEcho ("practice '" .. skillname .."'")
							return
						end
					end
				end
			end
		end
	end
end

function DSSpells_Level(name, line, wc)

	if practiceinprogress == "YES" then
	else
	
		local skillname = string.lower(wc[2])
		local skillpercent = tonumber(wc[4])

		if skillpercent < minpercent then
			if PracticeTable[skillname] == "" or PracticeTable[skillname] == nil then
			else
				if skillname == "flying" then
					if PracticeTable[skillname] == 1 then		
						if gmcpcharpclass == "shadow" or gmcpcharpclass == "sprite" or gmcpcharpclass == "half-grif" or gmcpcharpclass == "vampire" then
						else
							if practices > 0 then
								practiceinprogress = "YES"
								world.EnableGroup ("Practiced", 1)
								SendNoEcho ("practice '" .. skillname .."'")
								return
							end
						end
					end
				elseif skillname == "invis" then
					if PracticeTable[skillname] == 1 then					
						if gmcpcharpclass == "sprite" then
						else
							if practices > 0 then
								practiceinprogress = "YES"
								world.EnableGroup ("Practiced", 1)
								SendNoEcho ("practice '" .. skillname .."'")
								return
							end
						end
					end
				elseif skillname == "haste" then
					if PracticeTable[skillname] == 1 then
						if gmcpcharpclass == "quickling" then
						else
							if practices > 0 then
								practiceinprogress = "YES"
								world.EnableGroup ("Practiced", 1)
								SendNoEcho ("practice '" .. skillname .."'")
								return
							end
						end
					end
				else
					if PracticeTable[skillname] == 1 then
						if practices > 0 then
							practiceinprogress = "YES"
							world.EnableGroup ("Practiced", 1)
							SendNoEcho ("practice '" .. skillname .."'")
							return
						end
					end
				end
			end
		end
	end
end

function DSSpellsDisable()

	if practiceinprogress == "YES" then
	else
		world.EnableGroup ("DS_Spells", 0)
		skillsdone = "NO"
		ColourNote(msg_colour, "white", "AutoPractice is now complete. Thank you for your patience.")
	end
	
end

function ListCaptureEnable()

	world.EnableGroup("WishList", 1)
	SendNoEcho ("wish list")
	
end

function ListCaptureDisable()

	ScholarCheck = "YES"
	
	-- AutoPracticeEnable()
	
	world.EnableGroup("WishList", 0)
	SaveState()
	
end

function ListCapture(name, line, wc)

	local keyword = string.lower(wc[5])

	if keyword == "scholar" then
		if wc[4] == "--" then
			minpercent = 95
		else
			minpercent = 85
		end
	end
end

function AutoPracticeSpellToggle(name, line, wc)
	
	local sname  = string.lower(wc[2])
	local toggle = string.lower(wc[1])
	
	if PracticeTable[sname] == nil or PracticeTable[sname] == nil then
		ColourNote(qty_colour, "", sname, msg_colour, "", "Was not added or does not exist.")
	else
		if toggle == "yes" or toggle == "on" then
			ColourNote(msg_colour, "", "AutoPractice for ", qty_colour, "", sname, msg_colour, "", " has been enabled.")
			PracticeTable[sname] = 1
		elseif toggle == "no" or toggle == "off" then
			ColourNote(msg_colour, "", "AutoPractice for ", qty_colour, "", sname, msg_colour, "", " has been disabled.")
			PracticeTable[sname] = 0
		end
	end
	
	SaveState()
	
end

function AutoPracticeSpellAddEnable(name, line, wc)
	
	skilladdcheck = string.lower(wc[1])
	checktype = "add"
	SkillCheckEnable(skilladdcheck)
	
end

function SkillCheckTimer()

	if checktype == "add" then
		AutoPracticeSpellAdd()
	elseif checktype == "single" then
		AutoPracticeSingle()
	end

end

function AutoPracticeSpellAdd()
	
	if isskill == "YES" then
		
		if PracticeTable[skilladdcheck] == nil or PracticeTable[skilladdcheck] == "" then
			PracticeTable[skilladdcheck] = 1
			ColourNote(qty_colour, "", skilladdcheck, msg_colour, "", " has been added to the AutoPractice list.")
		else
			ColourNote(qty_colour, "", skilladdcheck, msg_colour, "", " has already been added to the AutoPractice list")
		end
	else
		ColourNote(qty_colour, "", skilladdcheck, msg_colour, "", " is not a skill or a spell.")
	end
	
	SaveState()

end

function AutoPracticeSpellRemove(name, line, wc)
	
	local sname  = string.lower(wc[1])
	local check = "NO"
	
	if PracticeTable[sname] == nil or PracticeTable[sname] == "" then
		ColourNote(qty_colour, "", sname, msg_colour, "", " has not been removed since it was never added in the first place.")
	else
		ColourNote(qty_colour, "", sname, msg_colour, "", " has been removed")
		PracticeTable[sname] = nil
	end

	SaveState()
	
end

function GetIntial()

	gmcpchar = gmcp("char")

	-- Check if we have data in each category, but only as much as necessary - once page built we can stop.
	if not gmcpchar or not gmcpchar.worth or not gmcpchar.vitals or not gmcpchar.stats or not gmcpchar.status or not gmcpchar.maxstats then
	
		return
	
	end
	
	practices = tonumber (gmcpchar.worth.pracs)
	
	gmcpbase = gmcp("char.base") -- fetch char.status and return it as a Lua table

	if gmcpbase.totpups == nil or gmcpbase.totpups == "" then
	else

		gmcpcharpclass = string.lower(gmcpbase.class)
		gmcpcharpsubclass = string.lower(gmcpbase.subclass)
		gmcpcharrace = string.lower(gmcpbase.race)
	end
	
end

function CreateInitialTable()

	PracticeTable = {}

-- Thief Skills and Spells

	PracticeTable["knife fighting"] = 1
	PracticeTable["kobold stench"] = 1
	PracticeTable["enhanced backstab"] = 1
	PracticeTable["spiral"] = 1
	PracticeTable["nimble cunning"] = 1
	PracticeTable["pilferage"] = 1
	PracticeTable["shoplifting"] = 1
	PracticeTable["entrap"] = 1
	PracticeTable["fence"] = 1
	PracticeTable["assassinate"] = 1
	PracticeTable["scorpion strike"] = 1
	PracticeTable["blindfighting"] = 1
	PracticeTable["stealth"] = 1
	PracticeTable["stalk"] = 1
	PracticeTable["quickstab"] = 1
	PracticeTable["veil of shadows"] = 1
	PracticeTable["veil of stone"] = 1
	PracticeTable["cell potential"] = 1
	PracticeTable["balor spittle"] = 1
	PracticeTable["becrotic Touch"] = 1

-- Psionicist Skills and Spells

	PracticeTable["combat mind"] = 1
	PracticeTable["mental balance"] = 1
	PracticeTable["willpower"] = 1
	PracticeTable["desolation"] = 1
	PracticeTable["pyromania"] = 1
	PracticeTable["beacon of homecoming"] = 1
	PracticeTable["homecoming "] = 1
	PracticeTable["timeshifting"] = 1
	PracticeTable["navigate"] = 1
	PracticeTable["beacon of light"] = 1
	PracticeTable["bypass"] = 1
	PracticeTable["detect undead"] = 1
	PracticeTable["strike undead"] = 1
	PracticeTable["blast undead"] = 1
	PracticeTable["necrocide"] = 1
	PracticeTable["zombify"] = 1
	PracticeTable["summon death"] = 1
	PracticeTable["slow"] = 1
	PracticeTable["amnesia"] = 1
	PracticeTable["demoralize"] = 1
	PracticeTable["mindflay"] = 1
	PracticeTable["combat empathy"] = 1
	PracticeTable["sense age"] = 1

-- Warrior Skills and Spells

	PracticeTable["shield block"] = 1
	PracticeTable["fortitude"] = 1
	PracticeTable["fifth attack"] = 1
	PracticeTable["sixth attack"] = 1
	PracticeTable["hammering blow"] = 1
	PracticeTable["death blow"] = 1
	PracticeTable["ironfist"] = 1
	PracticeTable["insanity"] = 1
	PracticeTable["enrage"] = 1
	PracticeTable["flank"] = 1
	PracticeTable["precision"] = 1
	PracticeTable["battle training "] = 1
	PracticeTable["tempering"] = 1
	PracticeTable["hammerforge"] = 1
	PracticeTable["hammerswing"] = 1
   
-- Mage Skills and Spells

	PracticeTable["immolate"] = 1
	PracticeTable["wraith form"] = 1
	PracticeTable["acid blast"] = 1
	PracticeTable["miasma"] = 1
	PracticeTable["elemental focus"] = 1
	PracticeTable["elemental ward"] = 1
	PracticeTable["air skewer"] = 1
	PracticeTable["earthen hammer"] = 1
	PracticeTable["ice daggers"] = 1
	PracticeTable["enchanters focus"] = 1
	PracticeTable["power projection"] = 1
	PracticeTable["petrify"] = 1
	PracticeTable["hex of entropy"] = 1
	PracticeTable["spear of odin"] = 1
	PracticeTable["curse of sloth"] = 1
	PracticeTable["hex of misfortune"] = 1

-- Cleric Skills and Spells

	PracticeTable["rally"] = 1
	PracticeTable["pure faith"] = 1
	PracticeTable["party sanctuary"] = 1
	PracticeTable["healing touch"] = 1
	PracticeTable["regeneration"] = 1
	PracticeTable["voice of god "] = 1
	PracticeTable["rehallow"] = 1
	PracticeTable["augmented healing"] = 1
	PracticeTable["pray for absolution"] = 1
	PracticeTable["haven"] = 1
	PracticeTable["holy shield"] = 1
	PracticeTable["serenity"] = 1             
	PracticeTable["humility"] = 1
	PracticeTable["sacrifice life"] = 1
	PracticeTable["heavenly smiting"] = 1
	PracticeTable["holy preference"] = 1
	PracticeTable["desecration"] = 1
	PracticeTable["pray for damnation"] = 1
	PracticeTable["suppressed healing"] = 1
	PracticeTable["unholy preference"] = 1
	PracticeTable["eye of passage"] = 1
	PracticeTable["sense danger"] = 1
	PracticeTable["eye of warning"] = 1
	PracticeTable["eye of discovery"] = 1
	PracticeTable["focused Vision"] = 1
   
-- Paladin Skills and Spells

	PracticeTable["test of faith"] = 1
	PracticeTable["call upon faith"] = 1
	PracticeTable["divine faith"] = 1
	PracticeTable["terminate"] = 1
	PracticeTable["apocalypse"] = 1
	PracticeTable["heavenly balance"] = 1
	PracticeTable["safeguard"] = 1
	PracticeTable["charge"] = 1
	PracticeTable["righteous anger"] = 1
	PracticeTable["lash"] = 1
	PracticeTable["interrogate"] = 1
	PracticeTable["tortured vision"] = 1
	PracticeTable["flay"] = 1
	PracticeTable["holy reprisal"] = 1

-- Ranger Skills and Spells

	PracticeTable["gaias revenge"] = 1
	PracticeTable["eruption"] = 1
	PracticeTable["wolf spirits"] = 1
	PracticeTable["energy ball"] = 1
	PracticeTable["call lightning"] = 1
	PracticeTable["tame"] = 1
	PracticeTable["huntmaster"] = 1
	PracticeTable["archery"] = 1
	PracticeTable["ambush"] = 1
	PracticeTable["volley"] = 1
	PracticeTable["pathfinding"] = 1
	PracticeTable["totem guidance"] = 1
	PracticeTable["summon life"] = 1
	PracticeTable["gaias focus"] = 1
	PracticeTable["gaias totem"] = 1
	PracticeTable["totem force"] = 1
	PracticeTable["reskin"] = 1
	PracticeTable["merge chaos"] = 1

-- Dodges

	PracticeTable["blink"] = 1
	PracticeTable["camouflage"] = 1
	PracticeTable["dodge"] = 1
	PracticeTable["holy intervention"] = 1
	PracticeTable["holy rift"] = 1
	PracticeTable["misdirection"] = 1
	PracticeTable["parry"] = 1
	PracticeTable["time shift"] = 1

-- Other

	PracticeTable["haste"] = 1
	PracticeTable["lightspeed"] = 1
	PracticeTable["second attack"] = 1
	PracticeTable["third attack"] = 1
	PracticeTable["fourth attack"] = 1
	PracticeTable["invis"] = 1
	PracticeTable["fly"] = 1
	PracticeTable["levitation"] = 0
	PracticeTable["sneak"] = 1
	PracticeTable["shadow"] = 0
	PracticeTable["major creation"] = 1
	PracticeTable["pick lock"] = 1
	PracticeTable["backstab"] = 1
	
	SaveState()
	
end
function AutoPracticeScholar(name, line, wc)
	
	local answer = string.lower(wc[1])
	
	if answer == "on" then
		minpercent = 95
		ColourNote(msg_colour, "", "You have indicated you have the scholar wish, changing minimum percentage to ", qty_colour, "", "95")
	elseif answer == "off" then
		minpercent = 85
		ColourNote(msg_colour, "", "You have indicated you do not have the scholar wish, changing minimum percentage to ", qty_colour, "", "85")
	end
	
	SaveState()
	
end

function tap_help()

	local title = "Tallimos' AutoPractice - Help"
	local title2 = "=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-="
	
	local leng = tonumber(string.len(title))
	local leng2 = tonumber(string.len(title2))
	
	local spacing = 0
	local lendif = 0
	
	if leng > leng2 then
	else
		lendif = leng2 - leng
		lendif = lendif * 0.5
	end

	spacing = string.rep(" ", lendif)
	
	ColourNote(help_colour, "", spacing, help_command_colour, "", "Tallimos' AutoPractice - Help")
	ColourNote(help_colour, "", "=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=")
	ColourNote(help_colour, "", "This plugin gives the user the ability to auto practice certain spells and skills.")
	ColourNote(help_colour, "", "=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=")
	Note("")

	ColourNote(help_colour, "", "The user can use either ", help_command_colour, "", "tap", help_colour, "", " or ", help_command_colour, "", "tautopractice")
	Note("")
	
	ColourNote(help_command_colour, "", "tap                       ", help_colour, "", " - command to start the autopractice process")
	Note("")

	ColourNote(help_command_colour, "", "tap max (skill/spell)     ", help_colour, "", " - command to fully practice a particular skill or spell.")
	ColourNote(help_colour, "", "                             The skill or spell DOES NOT have to be added to the")
	ColourNote(help_colour, "", "                             autopractice list for this command to work")
	Note("")
	
	ColourNote(help_command_colour, "", "tap add (skill/spell)     ", help_colour, "", " - command to add a skill or spell to the autopractice")
	ColourNote(help_colour, "", "                             list")
	Note("")

	ColourNote(help_command_colour, "", "tap remove (skill/spell)  ", help_colour, "", " - command to remove a skill or spell from the")
	ColourNote(help_colour, "", "                             autopractice list")
	Note("")
	
	ColourNote(help_command_colour, "", "tap <on/off> (skill/spell)", help_colour, "", " - command to toggle the autopractice for a particular")
	ColourNote(help_colour, "", "                             skill or spell")
	Note("")

	ColourNote(help_command_colour, "", "tap scholar <on/off>      ", help_colour, "", " - command to set if you have the scholar wish or not")
	ColourNote(help_colour, "", "                             when the ", help_command_colour, "", "tap", help_colour, "" , " or ", help_command_colour, "", "tap max", help_colour, "", " command is used for the first time a check is made to see if the user has the wish")
	Note("")

	ColourNote(help_command_colour, "", "tap abort                 ", help_colour, "", " - command to abort the autopractice system")
	Note("")

	ColourNote(help_command_colour, "white", "PLEASE NOTE:", help_command_colour, "", " (skill/spell)", help_colour, "", " must be the full name of the skill or spell.")
	Note("")
	
	ColourNote(help_colour, "", "=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=")
	Note("")

end	-- tap_help

function OnPluginInstall ()
	
	ColourNote(help_colour, "", "Thank you for installing Tallimos' AutoPracticer. Please see ", help_command_colour, "", "tap help", help_colour, "", " for more information.")
	
	if GetVariable ("appastfirstinstall") == "true" then
		assert (loadstring (GetVariable ("PracticeTable") or "")) ()
		assert (loadstring (GetVariable ("minpercent") or "")) ()
		assert (loadstring (GetVariable ("ScholarCheck") or "")) ()

	else
	
		PracticeTable = {}
		CreateInitialTable()
		
		minpercent = 85
		ScholarCheck = "NO"

	end

	SaveState()

end

function OnPluginEnable()

	ColourNote(help_colour, "", "Thank you for installing Tallimos' AutoPracticer. Please see ", help_command_colour, "", "tap help", help_colour, "", " for more information.")
	
	if GetVariable ("appastfirstinstall") == "true" then
		assert (loadstring (GetVariable ("PracticeTable") or "")) ()
		assert (loadstring (GetVariable ("minpercent") or "")) ()
		assert (loadstring (GetVariable ("ScholarCheck") or "")) ()

	else
	
		PracticeTable = {}
		CreateInitialTable()
		
		minpercent = 85
		ScholarCheck = "NO"

	end

	SaveState()

end -- OnPluginEnable

function OnPluginSaveState ()

	SetVariable ("PracticeTable", "PracticeTable = " .. serialize.save_simple (PracticeTable))
	SetVariable ("minpercent", "minpercent = " .. serialize.save_simple (minpercent))
	SetVariable ("ScholarCheck", "ScholarCheck = " .. serialize.save_simple (ScholarCheck))
	SetVariable ("appastfirstinstall", "true")

end -- OnPluginSaveState

]]>
</script>
</muclient>